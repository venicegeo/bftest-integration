{
	"id": "585847a3-60f5-792b-6292-3362af1a38ee",
	"name": "BF_API_INT",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "d76db264-ef9a-53e6-dee7-bc76d0c5afc6",
			"name": "01_Startup",
			"description": "",
			"order": [
				"ad16560a-819e-e89e-1838-a55b04b6f8e7",
				"5bb9ee68-bed4-940a-e20c-010d0215b207",
				"95040abd-0790-9146-3b0c-c82889a93f76",
				"670ec89a-7c02-ddb4-0b49-36de734b62d6",
				"289b24c7-c093-1997-f8d4-b3b73f3842e3",
				"3c2d8ff6-df8d-517d-009f-01e8fdf50cf3",
				"5342855a-9bc2-ddb5-08a9-23306551d5a9",
				"2c99ef09-04c1-8ffb-8df6-875c2037f358"
			],
			"owner": "699425",
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee"
		},
		{
			"id": "17bd039f-d787-ddf4-49dd-d96432083f6f",
			"name": "02_High",
			"description": "",
			"order": [
				"59d09fc1-38fa-e9e0-dbb3-bc1938913381",
				"155fb9a1-13d3-2f7e-8878-165bba501368",
				"3b413485-c5ab-505e-7b62-2e8b45100636",
				"6dbc6d39-13e8-a518-059f-955fbd1f6bf5"
			],
			"owner": "699425"
		},
		{
			"id": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"name": "03_Medium",
			"description": "",
			"order": [
				"0e4e48e2-078d-dabc-fe28-4452c2d80911",
				"e3a0f758-f2a6-5425-7ae7-979f36b45010",
				"448d51b5-8702-f410-b99d-1963ec41e934",
				"38e8f99e-b800-d13f-9864-b5c8691f3e2e",
				"77909558-b25b-d9b2-b56e-b2487f35b67f",
				"c3bacae4-8022-2b52-cfeb-ec27b522f00c",
				"0e5d0f66-f0a2-dbd0-fd38-cefea49af5a9",
				"8235071c-730b-e9c6-3f90-7d90eff7ffc5",
				"02f9eba7-9e14-e024-3531-289a580f1443",
				"cfd0ad45-89d2-e4ec-beca-9b5e48f83bc1",
				"e8bb035a-3b79-ff1d-779c-2b08c4ecba8a",
				"d76a92e4-2a90-576c-725a-b49e5a871528",
				"8efe1ba9-2ae3-71ff-3925-b9fcfcf8383e",
				"20da5a82-d9a1-b2f1-43e2-b3cb6ae0a38a",
				"ff8426ff-818e-4bfd-e49c-0bfccf0afb0c",
				"b02e6abe-b401-2612-39f7-79c3e90b14f9",
				"b52d17ec-637f-0be3-1b48-63a5922381e3",
				"06ed8bd3-3a3f-b3c5-b759-e816fed65641",
				"69f1c823-af04-432c-579d-e3d8d4372b76",
				"39cf1cba-d299-01d4-f931-2771e56fc0b7",
				"17e2a938-290b-6e2d-dc4f-b3599a471adb",
				"f0c42d5d-d22a-ddbc-1682-569a7809dfe5",
				"ce66d613-aac5-7278-3092-afbf6af4994a",
				"31ccca76-2708-ec04-a5c6-ae2bf9a30d8e"
			],
			"owner": "699425"
		},
		{
			"id": "842dd19b-65eb-4c3d-f775-eace49ca22ee",
			"name": "04_Low",
			"description": "",
			"order": [
				"6658c129-c62f-14eb-0d55-dada10f4ba57",
				"b07276d6-4bb8-df94-6f73-824f9dd4d386",
				"9bea6bff-1ed4-d7e9-be05-9c1ea2187b3d",
				"6978b93c-cb32-a8f2-29a2-fcd1768c58f7",
				"9f675f49-4a00-c9d3-dabf-57cb90060c78",
				"e05ce297-1541-5d21-e2b5-be2cc12b0a69",
				"96496508-9d31-71e1-822c-e76f55321445"
			],
			"owner": "699425"
		}
	],
	"timestamp": 1487188539874,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that another user's job was added to the job list.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "02f9eba7-9e14-e024-3531-289a580f1443",
			"method": "GET",
			"name": "Verify - Other Job added to List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job available in list\"] = found;",
			"time": 1486570127664,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/productline endpoint.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "06ed8bd3-3a3f-b3c5-b759-e816fed65641",
			"method": "POST",
			"name": "HTTP Product Line",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570148632,
			"url": "http://bf-api.{{domain}}/v0/productline",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Remove a job from the user's list of visible jobs,",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "0e4e48e2-078d-dabc-fe28-4452c2d80911",
			"method": "DELETE",
			"name": "Forget Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId'));",
			"time": 1486570117202,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that another user's job was not in the job list.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "0e5d0f66-f0a2-dbd0-fd38-cefea49af5a9",
			"method": "GET",
			"name": "Verify - Other Job not in  List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job not available in list\"] = !found;",
			"time": 1486570125992,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"id": "155fb9a1-13d3-2f7e-8878-165bba501368",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'job.properties.status')) {\n    if (data.job.properties.status === 'Running' || data.job.properties.status === 'Submitted' || data.job.properties.status === 'Pending') {\n        if (parseInt(postman.getEnvironmentVariable('retry_loop')) < parseInt(postman.getEnvironmentVariable('max_retries'))) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Job Status');\n            wait(30000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop','0');\n            tests[\"status is still \" + data.job.properties.status] = false;\n        }\n    }\n    else if (data.job.properties.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop','0');\n        tests[\"Job finished in time\"] = true;\n    }\n    else {\n        tests[\"status should not be \" + data.job.properties.status] = false;\n        postman.setEnvironmentVariable('retry_loop','0');\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1487359292455,
			"name": "Check Job Status",
			"description": "Check that the shoreline calculation job was successful.",
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Referer: https://beachfront.stage.geointservices.io/v0/user\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "17e2a938-290b-6e2d-dc4f-b3599a471adb",
			"method": "GET",
			"name": "Invalid CORS - Just Referer",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570152928,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the base endpoint.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {},
			"id": "20da5a82-d9a1-b2f1-43e2-b3cb6ae0a38a",
			"method": "GET",
			"name": "HTTP Base",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570144790,
			"url": "http://bf-api.{{domain}}",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Validate that the url given for the catalog service is valid",
			"folder": "d76db264-ef9a-53e6-dee7-bc76d0c5afc6",
			"headers": "",
			"helperAttributes": {},
			"id": "289b24c7-c093-1997-f8d4-b3b73f3842e3",
			"method": "GET",
			"name": "Validate Catalog URL",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570027024,
			"url": "{{catalog_url}}"
		},
		{
			"id": "2c99ef09-04c1-8ffb-8df6-875c2037f358",
			"headers": "",
			"url": "{{catalog_url}}/planet/rapideye/{{rapideyeId}}?PL_API_KEY={{PL API - NO COMMIT}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar noTest = {};\n\nif (testLevels(noTest, data, 'properties.status') && testLevels(noTest, data, 'properties.permissions', 'array') && _.includes(data.properties.permissions,'download') && data.properties.status === \"inactive\") {\n    // Multiple conditions combined in INT test, so it is not a failure if the field is missing for one image.\n    // Continue if scene is downloadable & inactive.\n    postman.setEnvironmentVariable('retry_loop', \"0\");\n    tests[\"Activatable image found.\"] = true;\n} else {\n    // Repeat with next image in list\n    var results = postman.getEnvironmentVariable('rapideyeImages');\n    postman.setEnvironmentVariable('rapideyeId', results.split(',')[0]);\n    postman.setEnvironmentVariable('rapideyeImages', results.replace(/[^,]*,/,''));\n    if (postman.getEnvironmentVariable('rapideyeId') === '') {\n        postman.setNextRequest('Discover Planetscope');\n        tests[\"Activatable image found.\"] = false;\n    } else {\n        postman.setNextRequest('Check if Rapideye Inactive');\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1487189217439,
			"name": "Check if Rapideye Inactive",
			"description": "Get the metadata of a single rapideye image.  Repeat this with a new image until an inactive image found.",
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"responses": []
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accepts a CORS request from http bf-swagger.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Origin: http://bf-swagger.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "31ccca76-2708-ec04-a5c6-ae2bf9a30d8e",
			"method": "GET",
			"name": "Invalid CORS - HTTP BF-Swagger",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570155798,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of a forgotten job, for the purpose of returning it to the job list.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "38e8f99e-b800-d13f-9864-b5c8691f3e2e",
			"method": "GET",
			"name": "Remember Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\n",
			"time": 1486570123015,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api accepts a CORS request from bf-swagger.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Origin: https://bf-swagger.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "39cf1cba-d299-01d4-f931-2771e56fc0b7",
			"method": "GET",
			"name": "Valid CORS - BF-Swagger",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570152046,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List all jobs the user can see, making sure the just created job is present.",
			"folder": "17bd039f-d787-ddf4-49dd-d96432083f6f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "3b413485-c5ab-505e-7b62-2e8b45100636",
			"method": "GET",
			"name": "List Jobs",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n    postman.setEnvironmentVariable('active jobs', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;",
			"time": 1486570085774,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Validate that the url given for the WMS service is valid.",
			"folder": "d76db264-ef9a-53e6-dee7-bc76d0c5afc6",
			"headers": "",
			"helperAttributes": {},
			"id": "3c2d8ff6-df8d-517d-009f-01e8fdf50cf3",
			"method": "GET",
			"name": "Validate WMS URL",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570029778,
			"url": "{{wms_server_url}}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that a forgotten job is not available in the jobs listed by scene.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "448d51b5-8702-f410-b99d-1963ec41e934",
			"method": "GET",
			"name": "Verify Forgotten - List Jobs by Scene",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === ('rapideye:' + postman.getEnvironmentVariable('rapideyeId'));\n        }\n    }\n}\nif (parseInt(postman.getEnvironmentVariable('active jobs - scene')) == 1) {\n    // If there was only one job before it was deleted, \n    // don't fail for a test that an array is returned.\n    delete tests[\"features is array\"];\n}\n\ntests[\"Forgotten Job still available in list by_scene\"] = found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"time": 1486570122127,
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/rapideye:{{rapideyeId}}",
			"rawModeData": ""
		},
		{
			"id": "5342855a-9bc2-ddb5-08a9-23306551d5a9",
			"headers": "",
			"url": "{{catalog_url}}/planet/discover/rapideye?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{TwoDaysAgo}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nvar results = '';\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/rapideye/i);\n        }\n        if (testLevels(tests, data.features[i], 'id', 'skip', 'features[0].')) {\n            results = data.features[i].id + ',' + results;\n        }\n    }\n}\ntests[\"All returned images are rapideye\"] = match;\npostman.setEnvironmentVariable('rapideyeId', results.split(',')[0]);\npostman.setEnvironmentVariable('rapideyeImages', results.replace(/[^,]*,/,''));",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1487189089122,
			"name": "Get Rapideye List",
			"description": "Query the catalog for rapideye images.",
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"responses": []
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Start a shoreline calculation job.",
			"folder": "17bd039f-d787-ddf4-49dd-d96432083f6f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "59d09fc1-38fa-e9e0-dbb3-bc1938913381",
			"method": "POST",
			"name": "Create Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'job.id')) {\n    postman.setEnvironmentVariable('jobId', data.job.id);\n}\ntestLevels(tests, data, 'job.geometry');\nif (testLevels(tests, data, 'job.properties.created_by')) {\n    tests[\"Correct User\"] = postman.getEnvironmentVariable('bf_user_1') === data.job.properties.created_by;\n}",
			"time": 1486570083474,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"rapideye:{{rapideyeId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List the algoithms in use by BF.",
			"folder": "d76db264-ef9a-53e6-dee7-bc76d0c5afc6",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "5bb9ee68-bed4-940a-e20c-010d0215b207",
			"method": "GET",
			"name": "List Algorithms",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'algorithms', 'array')) {\n    for (i = 0; i < data.algorithms.length; i++) {\n        testLevels(tests, data.algorithms[i], 'description', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'interface', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'max_cloud_cover', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'name', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'service_id', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'version', 'skip', 'algorithms[].');\n    }\n    if (testLevels(tests, data.algorithms[0], 'service_id', 'skip', 'algorithms[].')) {\n        postman.setEnvironmentVariable('algServiceId', data.algorithms[0].service_id);\n    }\n}",
			"time": 1486569677587,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to get the metadata of an algorithm that does not exist.",
			"folder": "842dd19b-65eb-4c3d-f775-eace49ca22ee",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "6658c129-c62f-14eb-0d55-dada10f4ba57",
			"method": "GET",
			"name": "Get Fake Algorithm",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"time": 1486570031903,
			"url": "https://bf-api.{{domain}}/v0/algorithm/foo",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get a list of services in use by BF.",
			"folder": "d76db264-ef9a-53e6-dee7-bc76d0c5afc6",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "670ec89a-7c02-ddb4-0b49-36de734b62d6",
			"method": "GET",
			"name": "Get Services",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'services.catalog')) {\n    postman.setEnvironmentVariable('catalog_url', data.services.catalog);\n}\nif (testLevels(tests, data, 'services.wms_server')) {\n    postman.setEnvironmentVariable('wms_server_url', data.services.wms_server.replace('https', 'http'));\n}\nif (testLevels(tests, data, 'profile.username')) {\n    tests[\"Correct username returned\"] = data.profile.username === postman.getEnvironmentVariable('bf_user_1');\n}",
			"time": 1486570023733,
			"url": "https://bf-api.{{domain}}/v0/user",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without specifying an algorithm_id.",
			"folder": "842dd19b-65eb-4c3d-f775-eace49ca22ee",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "6978b93c-cb32-a8f2-29a2-fcd1768c58f7",
			"method": "POST",
			"name": "Create Job - Missing algorithm_id",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'algorithm_id' mentioned in message\"] = responseBody.match(/algorithm_id/);",
			"time": 1486570134854,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api accepts a CORS request from beachfront.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Origin: https://beachfront.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "69f1c823-af04-432c-579d-e3d8d4372b76",
			"method": "GET",
			"name": "Valid CORS - Beachfront",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570151182,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List all jobs filtered by scene ID, making sure the just created job is present.",
			"folder": "17bd039f-d787-ddf4-49dd-d96432083f6f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "6dbc6d39-13e8-a518-059f-955fbd1f6bf5",
			"method": "GET",
			"name": "List Jobs by Scene",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === ('rapideye:' + postman.getEnvironmentVariable('rapideyeId'));\n        }\n    }\n    postman.setEnvironmentVariable('active jobs - scene', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"time": 1486570091487,
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/rapideye:{{rapideyeId}}",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List all jobs filtered by scene ID, making sure the remembered rob has returned.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "77909558-b25b-d9b2-b56e-b2487f35b67f",
			"method": "GET",
			"name": "Remembered Job in List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n}\n\ntests[\"Job found in list of jobs\"] = found;",
			"time": 1486570123911,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of another user's job, for the purpose of adding it to the job list.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "8235071c-730b-e9c6-3f90-7d90eff7ffc5",
			"method": "GET",
			"name": "Check Other User's Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);",
			"time": 1486570126901,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that another user's job was removed from the job list after the primary user forgot it.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "8efe1ba9-2ae3-71ff-3925-b9fcfcf8383e",
			"method": "GET",
			"name": "Verify - Other Job no longer in List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job not available in list\"] = !found;",
			"time": 1486570130662,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the metadata of a specific algorithm.",
			"folder": "d76db264-ef9a-53e6-dee7-bc76d0c5afc6",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "95040abd-0790-9146-3b0c-c82889a93f76",
			"method": "GET",
			"name": "Get Algorithm",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntestLevels(tests, data, 'algorithm.description');\ntestLevels(tests, data, 'algorithm.interface');\ntestLevels(tests, data, 'algorithm.max_cloud_cover');\ntestLevels(tests, data, 'algorithm.name');\nif (testLevels(tests, data.algorithm, 'service_id')) {\n    tests[\"Correct service_id returned\"] = postman.getEnvironmentVariable('algServiceId') === data.algorithm.service_id;\n}\ntestLevels(tests, data, 'algorithm.version');",
			"time": 1486569670819,
			"url": "https://bf-api.{{domain}}/v0/algorithm/{{algServiceId}}",
			"rawModeData": ""
		},
		{
			"id": "96496508-9d31-71e1-822c-e76f55321445",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'planet_api_key' mentioned in message\"] = responseBody.match(/planet_api_key/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1487189225026,
			"name": "Create Job - missing planet_api_key",
			"description": "Attempt a job without providing a Planet Labs Key.",
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check for a 404 response when trying to forget a job that does not exist.",
			"folder": "842dd19b-65eb-4c3d-f775-eace49ca22ee",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "9bea6bff-1ed4-d7e9-be05-9c1ea2187b3d",
			"method": "DELETE",
			"name": "Forget Fake Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"time": 1486570134038,
			"url": "https://bf-api.{{domain}}/v0/job/foo"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without specifying a scene_id.",
			"folder": "842dd19b-65eb-4c3d-f775-eace49ca22ee",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "9f675f49-4a00-c9d3-dabf-57cb90060c78",
			"method": "POST",
			"name": "Create Job - Missing scene_id",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'scene_id' mentioned in message\"] = responseBody.match(/scene_id/);",
			"time": 1486570135632,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"id": "ad16560a-819e-e89e-1838-a55b04b6f8e7",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-2);\nd_string = d.toISOString();\npostman.setEnvironmentVariable('TwoDaysAgo', d.toISOString());\n\npostman.setEnvironmentVariable('retry_loop', '0');\npostman.setEnvironmentVariable('max_retries', 20);\npostman.setEnvironmentVariable('PL Name', 'IntegrationTest_SriLanka');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1487359243399,
			"name": "Health Check",
			"description": "Check that the app responds at all.",
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/user endpoint.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "b02e6abe-b401-2612-39f7-79c3e90b14f9",
			"method": "GET",
			"name": "HTTP User",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570146725,
			"url": "http://bf-api.{{domain}}/v0/user",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check for a 404 response when trying to get the status of a job that does not exist.",
			"folder": "842dd19b-65eb-4c3d-f775-eace49ca22ee",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "b07276d6-4bb8-df94-6f73-824f9dd4d386",
			"method": "GET",
			"name": "Check Fake Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"time": 1486570131518,
			"url": "https://bf-api.{{domain}}/v0/job/foo"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/job endpoint.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "b52d17ec-637f-0be3-1b48-63a5922381e3",
			"method": "POST",
			"name": "HTTP Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570147710,
			"url": "http://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Start a shoreline calculation job, under a different user.\nCreating this job serves the purpose of making it visible to the primary user in this test.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_2}}"
			},
			"id": "c3bacae4-8022-2b52-cfeb-ec27b522f00c",
			"method": "POST",
			"name": "Create Job from Another User",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'job.id')) {\n    postman.setEnvironmentVariable('jobId_other', data.job.id);\n}\ntestLevels(tests, data, 'job.geometry');\nif (testLevels(tests, data, 'job.properties.created_by')) {\n    tests[\"Created by not the main user\"] = postman.getEnvironmentVariable('bf_user_2') === data.job.properties.created_by;\n}",
			"time": 1486570124840,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"rapideye:{{rapideyeId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Origin: http://bf-swagger.{{domain}}.garbage.io\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "ce66d613-aac5-7278-3092-afbf6af4994a",
			"method": "GET",
			"name": "Invalid CORS - Phish",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570154845,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Remove a job from the other user's list of visible jobs.\nThis should not remove the job from the primary user's list.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_2}}"
			},
			"id": "cfd0ad45-89d2-e4ec-beca-9b5e48f83bc1",
			"method": "DELETE",
			"name": "Have Other User Forget Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));",
			"time": 1486570128422,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Remove the other user's job from the primary user's list of visible jobs.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "d76a92e4-2a90-576c-725a-b49e5a871528",
			"method": "DELETE",
			"name": "Forget Other User's Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));",
			"time": 1486570129911,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without specifying a name.",
			"folder": "842dd19b-65eb-4c3d-f775-eace49ca22ee",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "e05ce297-1541-5d21-e2b5-be2cc12b0a69",
			"method": "POST",
			"name": "Create Job - Missing name",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'name' mentioned in message\"] = responseBody.match(/name/);",
			"time": 1486570136574,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that a forgotten job is not available in the job list.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "e3a0f758-f2a6-5425-7ae7-979f36b45010",
			"method": "GET",
			"name": "Verify Forgotten - List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n}\nif (parseInt(postman.getEnvironmentVariable('active jobs')) == 1) {\n    // If there was only one job before it was deleted, \n    // don't fail for a test that an array is returned.\n    delete tests[\"features is array\"];\n}\n\ntests[\"Job not available in list\"] = !found;",
			"time": 1486570120490,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that another user's job remained in the job list even after that other user forgot that job.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "e8bb035a-3b79-ff1d-779c-2b08c4ecba8a",
			"method": "GET",
			"name": "Verify - Other Job Still in List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job available in list\"] = found;",
			"time": 1486570129150,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accept a CORS request from garbage.geointservices.io.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Origin: https://garbage.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "f0c42d5d-d22a-ddbc-1682-569a7809dfe5",
			"method": "GET",
			"name": "Invalid CORS - Garbage",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570153759,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "585847a3-60f5-792b-6292-3362af1a38ee",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/algorithm endpoint.",
			"folder": "35507cea-82d5-8e0d-64bb-c1750f68a91f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "ff8426ff-818e-4bfd-e49c-0bfccf0afb0c",
			"method": "GET",
			"name": "HTTP Algorithm",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570145790,
			"url": "http://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		}
	]
}