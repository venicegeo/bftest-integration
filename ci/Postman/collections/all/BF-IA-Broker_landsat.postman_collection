{
	"id": "97014304-86fc-37aa-d5d3-577195fe0949",
	"name": "BF-IA-Broker_landsat",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "ff03db17-4d41-4412-c8a5-4e0432d631a2",
			"name": "01_Startup",
			"description": "",
			"order": [
				"ba181315-439d-eee8-c029-224b5dc7c617"
			],
			"owner": "699425"
		},
		{
			"id": "9fd46c09-1073-cbbb-29b6-1bea203b8744",
			"name": "02_High",
			"description": "",
			"order": [
				"cb0728e7-ffce-f2bc-1282-09be8c0ea287",
				"e8ae0f01-de5c-5aa3-caa1-be0f3cf2ad79",
				"3f534c2b-b670-550d-4d18-ccf1bff559ae",
				"c427dc42-4c38-da8c-7ff5-fd21e725f688"
			],
			"owner": "699425",
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949"
		},
		{
			"id": "ad28b47e-1458-4ef3-9c32-e727fcbd8988",
			"name": "04_Low",
			"description": "",
			"order": [
				"9b987cf7-4de5-33ef-f9d5-c381dea420ca",
				"5e42ed75-7ee5-b1f0-1c36-9e831bceb06c",
				"3a90ef0f-a3b6-5b67-9cd9-b519749084b8",
				"b5c04172-df79-250b-47d8-def002507d99",
				"210ccfda-81f9-6917-88d2-6a7b48bf8fb0",
				"4a934c77-27ae-a423-3b2b-0d1e121787ef"
			],
			"owner": "699425",
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949"
		}
	],
	"timestamp": 1492613558533,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"id": "210ccfda-81f9-6917-88d2-6a7b48bf8fb0",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/foo?PL_API_KEY={{PL API - NO COMMIT}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404 (Bug #15689)\"] = responseCode.code === 404;\ntests[\"'Not Found' message\"] = responseBody.match(/no/i);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493050185906,
			"name": "Get Metadata - Invalid Id",
			"description": "Attempt to retrieve the metadata of a scene that does not exist.",
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"responses": []
		},
		{
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"folder": "ad28b47e-1458-4ef3-9c32-e727fcbd8988",
			"headers": "",
			"helperAttributes": {},
			"id": "3a90ef0f-a3b6-5b67-9cd9-b519749084b8",
			"isFromCollection": true,
			"method": "GET",
			"name": "Discover - Bad PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"time": 1489597264291,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye?PL_API_KEY=foo",
			"version": 2
		},
		{
			"id": "3f534c2b-b670-550d-4d18-ccf1bff559ae",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://bf-tideprediction.{{domain}}",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'currentTide', 'number')) {\n    postman.setEnvironmentVariable('currentTide', data.currentTide);\n}\nif (testLevels(tests, data, 'maximumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('maximumTide24Hours', data.maximumTide24Hours);\n}\nif (testLevels(tests, data, 'minimumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('minimumTide24Hours', data.minimumTide24Hours);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496677784057,
			"name": "Get Tides Directly",
			"description": "Get the tide at a given point and time.",
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"responses": [],
			"rawModeData": "{\n\t\"lat\": {{lat}},\n\t\"lon\": {{lon}},\n\t\"dtg\": \"{{acquiredDate}}\"\n}"
		},
		{
			"id": "4a934c77-27ae-a423-3b2b-0d1e121787ef",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/{{landsatId}}?PL_API_KEY=foo",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493050223947,
			"name": "Get Metadata - Bad PL Key",
			"description": "Attempt to get the metadata of a single Landsat image while using an invalid PL Key",
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"responses": []
		},
		{
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover without supplying a PL key.",
			"headers": "",
			"helperAttributes": {},
			"id": "5e42ed75-7ee5-b1f0-1c36-9e831bceb06c",
			"method": "GET",
			"name": "Discover - No PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem missing planet labs key\"] = responseBody.match(/planet/i) && responseBody.match(/key/i);",
			"time": 1485549129412,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye",
			"version": 2,
			"folder": "ad28b47e-1458-4ef3-9c32-e727fcbd8988"
		},
		{
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover using an invalid item type.",
			"headers": "",
			"helperAttributes": {},
			"id": "9b987cf7-4de5-33ef-f9d5-c381dea420ca",
			"method": "GET",
			"name": "Discover - Bad Item Type",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem with item type\"] = responseBody.match(/item.*type/i);\ntests[\"'foo' is in reponse\"] = responseBody.match(/foo/i);",
			"time": 1485549069664,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/foo?PL_API_KEY={{PL API - NO COMMIT}}",
			"version": 2,
			"folder": "ad28b47e-1458-4ef3-9c32-e727fcbd8988"
		},
		{
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"folder": "ad28b47e-1458-4ef3-9c32-e727fcbd8988",
			"headers": "",
			"helperAttributes": {},
			"id": "b5c04172-df79-250b-47d8-def002507d99",
			"isFromCollection": true,
			"method": "POST",
			"name": "Activate - Bad PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"time": 1489597279259,
			"url": "https://bf-ia-broker.{{domain}}/planet/activate/rapideye/20170310_023105_5125803_RapidEye-3?PL_API_KEY=foo",
			"version": 2
		},
		{
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Check that the app responds at all.",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {},
			"id": "ba181315-439d-eee8-c029-224b5dc7c617",
			"method": "GET",
			"name": "Health Check",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-2);\nd_string = d.toISOString();\npostman.setEnvironmentVariable('TwoDaysAgo', d.toISOString());\npostman.setEnvironmentVariable('retry_loop', \"0\");\npostman.setEnvironmentVariable('max_retries', 20);\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"time": 1486498566240,
			"url": "https://bf-ia-broker.{{domain}}",
			"folder": "ff03db17-4d41-4412-c8a5-4e0432d631a2",
			"rawModeData": ""
		},
		{
			"id": "c427dc42-4c38-da8c-7ff5-fd21e725f688",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/{{landsatId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=true",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "tides",
					"value": "true",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('landsatId') == data.id;\n}\nif (testLevels(tests, data, 'properties.CurrentTide')) {\n    tests[\"CurrentTide is correct\"] = data.properties.CurrentTide <= 1.1*parseFloat(postman.getEnvironmentVariable('currentTide')) && data.properties.CurrentTide >= 0.9*parseFloat(postman.getEnvironmentVariable('currentTide'));\n}\nif (testLevels(tests, data, 'properties.MaximumTide24Hours')) {\n    tests[\"MaximumTide24Hours is correct\"] = data.properties.MaximumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours')) && data.properties.MaximumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours'));\n}\nif (testLevels(tests, data, 'properties.MinimumTide24Hours')) {\n    tests[\"MinimumTide24Hours is correct\"] = data.properties.MinimumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours')) && data.properties.MinimumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours'));\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496342600587,
			"name": "Get Landsat with tides",
			"description": "Get the metadata of a single Landsat image, including the tideprediction results in the metadata.",
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"responses": []
		},
		{
			"id": "cb0728e7-ffce-f2bc-1282-09be8c0ea287",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{TwoDaysAgo}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nvar results = '';\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'id', 'skip', 'features[0].')) {\n            results = data.features[i].id + ',' + results;\n        }\n    }\n}\ntests[\"All returned images are landsat\"] = match;\npostman.setEnvironmentVariable('landsatId', results.split(',')[0]);\npostman.setEnvironmentVariable('landsatImages', results.replace(/[^,]*,/,''));",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493050272438,
			"name": "Discover Landsat",
			"description": "Query the catalog for Landsat images.",
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"responses": []
		},
		{
			"id": "e8ae0f01-de5c-5aa3-caa1-be0f3cf2ad79",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/{{landsatId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=false",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "tides",
					"value": "false",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar noTest = {};\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('landsatId') == data.id;\n}\nif (testLevels(tests, data, 'bbox', 'array')) {\n    tests[\"Full bounding box available\"] = data.bbox.length == 4;\n    postman.setEnvironmentVariable('lon', (data.bbox[0] + data.bbox[2])/2);\n    postman.setEnvironmentVariable('lat', (data.bbox[1] + data.bbox[3])/2);\n}\nif (testLevels(tests, data, 'properties.acquiredDate')) {\n    var d = new Date(data.properties.acquiredDate);\n    var datestring = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + '-' + d.getUTCHours() + '-' + d.getMinutes();\n    postman.setEnvironmentVariable('acquiredDate', datestring);\n}\n\ntests[\"Tides should not be included in the result\"] = !testLevels(noTest, data, 'properties.CurrentTide') && !testLevels(noTest, data, 'properties.MaximumTide24Hours') && !testLevels(noTest, data, 'properties.MinimumTide24Hours');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496678023850,
			"name": "Get Landsat",
			"description": "Get the metadata of a single Landsat image.",
			"collectionId": "97014304-86fc-37aa-d5d3-577195fe0949",
			"responses": []
		}
	]
}