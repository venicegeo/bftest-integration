{
	"owner": "835759",
	"lastUpdatedBy": "835759",
	"lastRevision": 2368300441,
	"team": null,
	"id": "622ebe97-7f87-4598-df69-9052c4c6a20a",
	"name": "BF-IA-Broker_landsat",
	"description": "",
	"folders_order": [
		"521141b7-964a-d848-c4bd-2aa9ff3f2b8d",
		"202a79bd-e524-196b-e3f3-fbd70e27b722",
		"781985a9-c49b-556c-03b2-0ab957499024",
		"23e49f3b-5271-2b44-c5b0-7cab016edbe3"
	],
	"order": [],
	"requests": [
		{
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3",
			"headers": "",
			"helperAttributes": {},
			"id": "3a657b3a-fdab-d9a6-d067-5e480318d8fc",
			"isFromCollection": true,
			"method": "POST",
			"name": "Activate - Bad PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"time": 1489597279259,
			"url": "https://bf-ia-broker.{{domain}}/planet/activate/rapideye/20170310_023105_5125803_RapidEye-3?PL_API_KEY=foo",
			"version": 2
		},
		{
			"id": "3f8f20aa-b184-e36b-5102-928ca59950d7",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&cloudCover={{cloudCover}}",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "cloudCover",
					"value": "{{cloudCover}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_cc = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.cloudCover', 'skip', 'features[0].')) {\n            if (data.features[i].properties.cloudCover > parseFloat(postman.getEnvironmentVariable('cloudCover'))) {\n                match_cc = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are below the defined cloud cover\"] = match_cc;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496861461696,
			"name": "Discover Landsat - cloudCover",
			"description": "Query the catalog for Landsat images, using \"cloudCover\" as the only query parameter.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "781985a9-c49b-556c-03b2-0ab957499024"
		},
		{
			"id": "3ff2ba5e-001f-791d-dab4-9ff745fce334",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&bbox=185,195,200,365",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "bbox",
					"value": "185,195,200,365",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496925648156,
			"name": "Discover - Out-of-Bounds bbox",
			"description": "Attempt to discover landsat images using an out-of-bounds bbox",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3"
		},
		{
			"id": "40f4695c-9529-b271-7a32-c56984a48632",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&bbox={{bbox}}",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "bbox",
					"value": "{{bbox}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_bb = true;\n\nfunction checkIntersection(imgBB, srcBB, threshold) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n    var latIntersect = (imgBB[0]+threshold >= srcBB[0] && imgBB[0] <= srcBB[2]+threshold) || (srcBB[0]+threshold >= imgBB[0] && srcBB[0] <= imgBB[2]+threshold);\n    var lonIntersect = (imgBB[1]+threshold >= srcBB[1] && imgBB[1] <= srcBB[3]+threshold) || (srcBB[1]+threshold >= imgBB[1] && srcBB[1] <= imgBB[3]+threshold);\n    return latIntersect && lonIntersect;\n}\n\nsrcBB = postman.getEnvironmentVariable('bbox').split(',').map(Number);\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'bbox', 'skip', 'features[0].')) {\n            imgBB = data.features[i].bbox;\n            if (!checkIntersection(imgBB, srcBB, 0.001)) {\n                // 0.001 degree threshold is arbitrary\n                match_bb = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images intersect the defined bounding box\"] = match_bb;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1507744974928,
			"name": "Discover Landsat - bbox",
			"description": "Query the catalog for Landsat images, using \"bbox\" as the only query parameter.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": []
		},
		{
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover without supplying a PL key.",
			"headers": "",
			"helperAttributes": {},
			"id": "4ad7123e-0b9e-7183-13ea-c20f17dd65c9",
			"method": "GET",
			"name": "Discover - No PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem missing planet labs key\"] = responseBody.match(/planet/i) && responseBody.match(/key/i);",
			"time": 1485549129412,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye",
			"version": 2,
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3"
		},
		{
			"id": "4c83727d-e5cc-66f9-a6ab-25a06fa08ba2",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/{{landsatId}}?PL_API_KEY=foo",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493050223947,
			"name": "Get Metadata - Bad PL Key",
			"description": "Attempt to get the metadata of a single Landsat image while using an invalid PL Key",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3"
		},
		{
			"id": "5df14334-bc00-0a38-e353-44882ee37ba3",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{fiveMonthsAgo}}",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "maxAcquiredDate",
					"value": "{{fiveMonthsAgo}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('fiveMonthsAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are before the defined acquiredDate\"] = match_date;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496870438378,
			"name": "Discover Landsat - maxAcquiredDate",
			"description": "Query the catalog for Landsat images, using \"maxAcquiredDate\" as the only query parameter.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "781985a9-c49b-556c-03b2-0ab957499024"
		},
		{
			"id": "7ec283d9-a167-6c50-6da4-adc31d48f7f1",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/{{landsatId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=true",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "tides",
					"value": "true",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('landsatId') == data.id;\n}\nif (testLevels(tests, data, 'properties.CurrentTide')) {\n    tests[\"CurrentTide is correct\"] = data.properties.CurrentTide <= 1.1*parseFloat(postman.getEnvironmentVariable('currentTide')) && data.properties.CurrentTide >= 0.9*parseFloat(postman.getEnvironmentVariable('currentTide'));\n}\nif (testLevels(tests, data, 'properties.MaximumTide24Hours')) {\n    tests[\"MaximumTide24Hours is correct\"] = data.properties.MaximumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours')) && data.properties.MaximumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours'));\n}\nif (testLevels(tests, data, 'properties.MinimumTide24Hours')) {\n    tests[\"MinimumTide24Hours is correct\"] = data.properties.MinimumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours')) && data.properties.MinimumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours'));\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496342600587,
			"name": "Get Landsat with tides",
			"description": "Get the metadata of a single Landsat image, including the tideprediction results in the metadata.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "202a79bd-e524-196b-e3f3-fbd70e27b722"
		},
		{
			"id": "8038f57e-7320-bcde-c10a-25f92ebf837d",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&cloudCover=foo",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "cloudCover",
					"value": "foo",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'cloudCover'\"] = responseBody.match(/cloud.*cover/i);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496926346517,
			"name": "Discover - Invalid cloudCover",
			"description": "Attempt to discover landsat images using a string cloudCover.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3"
		},
		{
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover using an invalid item type.",
			"headers": "",
			"helperAttributes": {},
			"id": "832519a9-23f3-7507-2064-703b05ab603b",
			"method": "GET",
			"name": "Discover - Bad Item Type",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem with item type\"] = responseBody.match(/item.*type/i);\ntests[\"'foo' is in reponse\"] = responseBody.match(/foo/i);",
			"time": 1485549069664,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/foo?PL_API_KEY={{PL API - NO COMMIT}}",
			"version": 2,
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3"
		},
		{
			"id": "869291bd-722c-ca4a-c716-e17dc23c9d4d",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&bbox=17,9,16,8",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "bbox",
					"value": "17,9,16,8",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'bbox'\"] = responseBody.match(/bbox/i);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496863263332,
			"name": "Discover - Reversed bbox",
			"description": "Attempt to discover landsat images using a reversed bbox",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3"
		},
		{
			"id": "950deda3-c0cb-6626-8aea-cc6f4b66f7fb",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&bbox=foo",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "bbox",
					"value": "foo",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'bbox'\"] = responseBody.match(/bbox/i);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496925604994,
			"name": "Discover - Invalid bbox",
			"description": "Attempt to discover landsat images using an invalid bbox",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3"
		},
		{
			"id": "9c856950-a9a2-e547-8886-9d3e1ef6e1fa",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "https://bf-ia-broker.{{domain}}",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-2);\npostman.setEnvironmentVariable('twoDaysAgo', d.toISOString());\nd.setMonth(d.getMonth()-5);\npostman.setEnvironmentVariable('fiveMonthsAgo', d.toISOString());\npostman.setEnvironmentVariable('retry_loop', \"0\");\npostman.setEnvironmentVariable('max_retries', 25);\npostman.setEnvironmentVariable('bbox', '9,46,17,50');\npostman.setEnvironmentVariable('cloudCover', '0.75');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496858622472,
			"name": "Health Check",
			"description": "Check that the app responds at all.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"rawModeData": "",
			"folder": "521141b7-964a-d848-c4bd-2aa9ff3f2b8d"
		},
		{
			"id": "9f5455e3-48c2-2374-c577-34eeca658248",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"enabled": true,
					"description": ""
				}
			],
			"url": "https://bf-tideprediction.{{domain}}",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'currentTide', 'number')) {\n    postman.setEnvironmentVariable('currentTide', data.currentTide);\n}\nif (testLevels(tests, data, 'maximumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('maximumTide24Hours', data.maximumTide24Hours);\n}\nif (testLevels(tests, data, 'minimumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('minimumTide24Hours', data.minimumTide24Hours);\n}",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1496677784057,
			"name": "Get Tides Directly",
			"description": "Get the tide at a given point and time.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"rawModeData": "{\n\t\"lat\": {{lat}},\n\t\"lon\": {{lon}},\n\t\"dtg\": \"{{acquiredDate}}\"\n}",
			"folder": "202a79bd-e524-196b-e3f3-fbd70e27b722",
			"timestamp": null
		},
		{
			"id": "a1e3082d-0154-9247-c6b2-89ef9826015c",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{twoDaysAgo}}",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nvar results = '';\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'id', 'skip', 'features[0].')) {\n            results = data.features[i].id + ',' + results;\n        }\n    }\n}\ntests[\"All returned images are landsat\"] = match;\npostman.setEnvironmentVariable('landsatId', results.split(',')[0]);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496860767844,
			"name": "Discover Landsat",
			"description": "Query the catalog for Landsat images.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "202a79bd-e524-196b-e3f3-fbd70e27b722"
		},
		{
			"id": "b5689912-24c8-1b2c-463b-61cfee5e470f",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/{{landsatId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=false",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "tides",
					"value": "false",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar noTest = {};\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('landsatId') == data.id;\n}\nif (testLevels(tests, data, 'bbox', 'array')) {\n    tests[\"Full bounding box available\"] = data.bbox.length == 4;\n    postman.setEnvironmentVariable('lon', (data.bbox[0] + data.bbox[2])/2);\n    postman.setEnvironmentVariable('lat', (data.bbox[1] + data.bbox[3])/2);\n}\nif (testLevels(tests, data, 'properties.acquiredDate')) {\n    var d = new Date(data.properties.acquiredDate);\n    var datestring = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + '-' + d.getUTCHours() + '-' + d.getMinutes();\n    postman.setEnvironmentVariable('acquiredDate', datestring);\n}\n\ntests[\"Tides should not be included in the result\"] = !testLevels(noTest, data, 'properties.CurrentTide') && !testLevels(noTest, data, 'properties.MaximumTide24Hours') && !testLevels(noTest, data, 'properties.MinimumTide24Hours');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496678023850,
			"name": "Get Landsat",
			"description": "Get the metadata of a single Landsat image.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "202a79bd-e524-196b-e3f3-fbd70e27b722"
		},
		{
			"id": "bc2e4c71-9f8c-93c8-51b1-a99d6bd233fa",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are after the defined acquiredDate\"] = match_date;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496861487215,
			"name": "Discover Landsat - acquiredDate",
			"description": "Query the catalog for Landsat images, using \"acquiredDate\" as the only query parameter.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "781985a9-c49b-556c-03b2-0ab957499024"
		},
		{
			"id": "da3fbb13-fe0b-3495-29a6-b2a0384c05f0",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}&maxAcquiredDate={{twoDaysAgo}}&bbox={{bbox}}&cloudCover={{cloudCover}}",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "bbox",
					"value": "{{bbox}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "cloudCover",
					"value": "{{cloudCover}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\nvar match_bb = true;\nvar match_cc = true;\n\nfunction checkIntersection(imgBB, srcBB, threshold) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n    var latIntersect = (imgBB[0]+threshold >= srcBB[0] && imgBB[0] <= srcBB[2]+threshold) || (srcBB[0]+threshold >= imgBB[0] && srcBB[0] <= imgBB[2]+threshold);\n    var lonIntersect = (imgBB[1]+threshold >= srcBB[1] && imgBB[1] <= srcBB[3]+threshold) || (srcBB[1]+threshold >= imgBB[1] && srcBB[1] <= imgBB[3]+threshold);\n    return latIntersect && lonIntersect;\n}\n\nsrcBB = postman.getEnvironmentVariable('bbox').split(',').map(Number);\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo') || data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('twoDaysAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n        if (testLevels(tests, data.features[i], 'bbox', 'skip', 'features[0].')) {\n            imgBB = data.features[i].bbox;\n            if (!checkIntersection(imgBB, srcBB, 0.001)) {\n                match_bb = false;\n                console.log(data.features[i].id);\n            }\n        }\n        if (testLevels(tests, data.features[i], 'properties.cloudCover', 'skip', 'features[0].')) {\n            if (data.features[i].properties.cloudCover > parseFloat(postman.getEnvironmentVariable('cloudCover'))) {\n                match_cc = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are after the defined acquiredDate\"] = match_date;\ntests[\"All returned images intersect the defined bounding box\"] = match_bb;\ntests[\"All returned images are below the defined cloud cover\"] = match_cc;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1507745083789,
			"name": "Discover Landsat - dates, cc, & bb",
			"description": "Query the catalog for Landsat images, using \"bbox\", \"cloudCover\", \"acquiredDate\", & \"maxAcquiredDate\" as the query parameters.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": []
		},
		{
			"id": "e1681e24-748e-daf1-f08e-e977b0ed5b90",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/foo?PL_API_KEY={{PL API - NO COMMIT}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 404 (Bug #15689)\"] = responseCode.code === 404;\ntests[\"'Not Found' message\"] = responseBody.match(/no/i);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493050185906,
			"name": "Get Metadata - Invalid Id",
			"description": "Attempt to retrieve the metadata of a scene that does not exist.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3"
		},
		{
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"folder": "23e49f3b-5271-2b44-c5b0-7cab016edbe3",
			"headers": "",
			"helperAttributes": {},
			"id": "f1612b47-c75a-d1f5-117b-1dc51cd53fcb",
			"isFromCollection": true,
			"method": "GET",
			"name": "Discover - Bad PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"time": 1489597264291,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye?PL_API_KEY=foo",
			"version": 2
		},
		{
			"id": "f1bb4333-576a-289a-71e7-c2e38948c0c8",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}&maxAcquiredDate={{twoDaysAgo}}",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo') || data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('twoDaysAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are within the defined date range\"] = match_date;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496925599630,
			"name": "Discover Landsat - Date Range",
			"description": "Query the catalog for Landsat images, using \"acquiredDate\" & \"maxAcquiredDate\" as the query parameters.",
			"collectionId": "622ebe97-7f87-4598-df69-9052c4c6a20a",
			"responses": [],
			"folder": "781985a9-c49b-556c-03b2-0ab957499024"
		}
	]
}