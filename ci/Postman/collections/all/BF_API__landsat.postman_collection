{
	"id": "d006d400-16a5-1221-e529-28f11b17df5b",
	"name": "BF_API__landsat",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "89dc584b-785b-4439-c252-2a87130d45ea",
			"name": "01_Startup",
			"description": "",
			"order": [
				"ddfbbaea-7d4e-3de9-3e78-ec7d0f0981d6",
				"c937b341-8fa7-730b-1aa1-26ff1a84ab80",
				"ce479973-215e-a440-0a66-6f8f0e8854c7",
				"ea3d1a0b-0a1e-708b-ff35-38e842b36f16",
				"432a8bfc-8902-715a-c2e2-086fc02f6388",
				"ad936e0f-2304-13e4-9022-3b809f8cd6ff",
				"3600cea5-f0bd-f368-27f2-635b8360442f"
			],
			"owner": "699425"
		},
		{
			"id": "e4a7d3fd-b826-dbe4-cd14-186663da434f",
			"name": "02_High",
			"description": "",
			"order": [
				"64294335-1739-d9b1-269c-35ee4bce0867",
				"cbc9d204-c670-7451-cb65-a7eff3e78f40",
				"be0417c7-3c67-0fec-0bc2-2d66b8991aaa",
				"ad996b67-337e-6ddd-eaef-759f80842c21"
			],
			"owner": "699425"
		},
		{
			"id": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"name": "03_Medium",
			"description": "",
			"order": [
				"0da0a6d9-ee99-4505-c091-8b3458ade0a2",
				"6900a48f-42ee-ce5d-b224-78bd43e8a3df",
				"9456c867-c2ed-851f-8805-9ad3397fe6a0",
				"0c1efc82-6873-ada7-1efb-ab336fd91b04",
				"9944dbf2-4a66-481f-8855-82e6cb74c11e",
				"ef087538-0b2d-895b-cf32-f0170aa2a952",
				"003cf48e-696f-576d-642c-b856c74c61c0",
				"8cbff64a-1cba-3cb9-2c74-a48919eb5554",
				"f89e957b-c42c-e6dc-4485-7ed5c358d13e",
				"1755987d-b889-57b8-5e3a-ca63ad24a4b0",
				"bf5994e5-712d-8591-95f2-a07b14eb8928",
				"278767d6-48f9-ad14-ebe8-6590dcc6df1a",
				"af9ec773-202d-ffe4-e739-7f36e1f5a93d",
				"6137122c-b01e-c60e-17af-24be7f21854c",
				"821fced0-3105-865d-61f0-9572762e7272",
				"4c0203af-1ac0-6deb-1f94-3cd90da9c834",
				"c7e1b9fa-9bee-4e0e-e173-5c3eeb36e91a",
				"79d575bc-a8b6-0808-dc56-410710f284b0",
				"a695db6c-a3af-e754-d85a-892a00768197",
				"3fb013ff-8dff-e766-180d-f21cddb5baef",
				"a037f06e-128d-1202-35c7-c4eab0e7e382",
				"0173ba41-fa59-3657-e11c-0452b6e4b477",
				"3ffd69a5-fbcb-5732-fb27-1a901b2d64c4",
				"2477f64e-7de3-511e-bc02-28f73e6c48f0"
			],
			"owner": "699425"
		},
		{
			"id": "9d5f63b0-9230-8d71-9653-cb136f02deb1",
			"name": "04_Low",
			"description": "",
			"order": [
				"1495336b-eeb5-da94-388d-c64fe7dfc995",
				"f17af5b4-0480-5e8a-4005-482e4ddff1d5",
				"c4782cdc-b437-1280-a5a1-9f1d3ecb6849",
				"3f18bc2d-0012-045c-7e82-a43d1343246a",
				"c97e3a92-2e23-858f-3e6c-0bcf31992ff7",
				"20efc44b-648a-c9df-6297-6b284d3bf5a4",
				"8ee168d0-dcae-20c8-a761-85bff417f4b1"
			],
			"owner": "699425"
		}
	],
	"timestamp": 1493050762434,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that another user's job was not in the job list.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "003cf48e-696f-576d-642c-b856c74c61c0",
			"method": "GET",
			"name": "Verify - Other Job not in  List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job not available in list\"] = !found;",
			"time": 1486570125992,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accept a CORS request from garbage.geointservices.io.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Origin: https://garbage.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "0173ba41-fa59-3657-e11c-0452b6e4b477",
			"method": "GET",
			"name": "Invalid CORS - Garbage",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570153759,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of a forgotten job, for the purpose of returning it to the job list.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "0c1efc82-6873-ada7-1efb-ab336fd91b04",
			"method": "GET",
			"name": "Remember Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\n",
			"time": 1486570123015,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Remove a job from the user's list of visible jobs,",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "0da0a6d9-ee99-4505-c091-8b3458ade0a2",
			"method": "DELETE",
			"name": "Forget Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId'));",
			"time": 1486570117202,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to get the metadata of an algorithm that does not exist.",
			"folder": "9d5f63b0-9230-8d71-9653-cb136f02deb1",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "1495336b-eeb5-da94-388d-c64fe7dfc995",
			"method": "GET",
			"name": "Get Fake Algorithm",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"time": 1486570031903,
			"url": "https://bf-api.{{domain}}/v0/algorithm/foo",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Remove a job from the other user's list of visible jobs.\nThis should not remove the job from the primary user's list.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_2}}"
			},
			"id": "1755987d-b889-57b8-5e3a-ca63ad24a4b0",
			"method": "DELETE",
			"name": "Have Other User Forget Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));",
			"time": 1486570128422,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without specifying a name.",
			"folder": "9d5f63b0-9230-8d71-9653-cb136f02deb1",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "20efc44b-648a-c9df-6297-6b284d3bf5a4",
			"method": "POST",
			"name": "Create Job - Missing name",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'name' mentioned in message\"] = responseBody.match(/name/);",
			"time": 1486570136574,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accepts a CORS request from http bf-swagger.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Origin: http://bf-swagger.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "2477f64e-7de3-511e-bc02-28f73e6c48f0",
			"method": "GET",
			"name": "Invalid CORS - HTTP BF-Swagger",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570155798,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Remove the other user's job from the primary user's list of visible jobs.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "278767d6-48f9-ad14-ebe8-6590dcc6df1a",
			"method": "DELETE",
			"name": "Forget Other User's Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));",
			"time": 1486570129911,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"rawModeData": ""
		},
		{
			"id": "3600cea5-f0bd-f368-27f2-635b8360442f",
			"headers": "",
			"url": "{{catalog_url}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{TwoDaysAgo}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nvar results = '';\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'id', 'skip', 'features[0].')) {\n            results = data.features[i].id + ',' + results;\n        }\n    }\n}\ntests[\"All returned images are landsat\"] = match;\npostman.setEnvironmentVariable('landsatId', results.split(',')[25]);\npostman.setEnvironmentVariable('landsatImages', results.replace(/[^,]*,/,''));",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493142416373,
			"name": "Get Landsat List",
			"description": "Query the catalog for Landsat images.",
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"responses": []
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without specifying an algorithm_id.",
			"folder": "9d5f63b0-9230-8d71-9653-cb136f02deb1",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "3f18bc2d-0012-045c-7e82-a43d1343246a",
			"method": "POST",
			"name": "Create Job - Missing algorithm_id",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'algorithm_id' mentioned in message\"] = responseBody.match(/algorithm_id/);",
			"time": 1486570134854,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api accepts a CORS request from bf-swagger.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Origin: https://bf-swagger.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "3fb013ff-8dff-e766-180d-f21cddb5baef",
			"method": "GET",
			"name": "Valid CORS - BF-Swagger",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570152046,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Origin: http://bf-swagger.{{domain}}.garbage.io\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "3ffd69a5-fbcb-5732-fb27-1a901b2d64c4",
			"method": "GET",
			"name": "Invalid CORS - Phish",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570154845,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Validate that the url given for the catalog service is valid",
			"folder": "89dc584b-785b-4439-c252-2a87130d45ea",
			"headers": "",
			"helperAttributes": {},
			"id": "432a8bfc-8902-715a-c2e2-086fc02f6388",
			"method": "GET",
			"name": "Validate Catalog URL",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570027024,
			"url": "{{catalog_url}}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/user endpoint.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "4c0203af-1ac0-6deb-1f94-3cd90da9c834",
			"method": "GET",
			"name": "HTTP User",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570146725,
			"url": "http://bf-api.{{domain}}/v0/user",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the base endpoint.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {},
			"id": "6137122c-b01e-c60e-17af-24be7f21854c",
			"method": "GET",
			"name": "HTTP Base",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570144790,
			"url": "http://bf-api.{{domain}}",
			"rawModeData": ""
		},
		{
			"id": "64294335-1739-d9b1-269c-35ee4bce0867",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'job.id')) {\n    postman.setEnvironmentVariable('jobId', data.job.id);\n}\ntestLevels(tests, data, 'job.geometry');\nif (testLevels(tests, data, 'job.properties.created_by')) {\n    tests[\"Correct User\"] = postman.getEnvironmentVariable('bf_user_1') === data.job.properties.created_by;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1493136846793,
			"name": "Create Job",
			"description": "Start a shoreline calculation job.",
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"landsat:{{landsatId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that a forgotten job is not available in the job list.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "6900a48f-42ee-ce5d-b224-78bd43e8a3df",
			"method": "GET",
			"name": "Verify Forgotten - List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n}\nif (parseInt(postman.getEnvironmentVariable('active jobs')) == 1) {\n    // If there was only one job before it was deleted, \n    // don't fail for a test that an array is returned.\n    delete tests[\"features is array\"];\n}\n\ntests[\"Job not available in list\"] = !found;",
			"time": 1486570120490,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/productline endpoint.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "79d575bc-a8b6-0808-dc56-410710f284b0",
			"method": "POST",
			"name": "HTTP Product Line",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570148632,
			"url": "http://bf-api.{{domain}}/v0/productline",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/algorithm endpoint.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "821fced0-3105-865d-61f0-9572762e7272",
			"method": "GET",
			"name": "HTTP Algorithm",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570145790,
			"url": "http://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check the job status of another user's job, for the purpose of adding it to the job list.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "8cbff64a-1cba-3cb9-2c74-a48919eb5554",
			"method": "GET",
			"name": "Check Other User's Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);",
			"time": 1486570126901,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without providing a Planet Labs Key.",
			"folder": "9d5f63b0-9230-8d71-9653-cb136f02deb1",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "8ee168d0-dcae-20c8-a761-85bff417f4b1",
			"method": "POST",
			"name": "Create Job - missing planet_api_key",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'planet_api_key' mentioned in message\"] = responseBody.match(/planet_api_key/);",
			"time": 1486570137917,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "9456c867-c2ed-851f-8805-9ad3397fe6a0",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/landsat:{{landsatId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === ('landsat:' + postman.getEnvironmentVariable('landsatId'));\n        }\n    }\n}\nif (parseInt(postman.getEnvironmentVariable('active jobs - scene')) == 1) {\n    // If there was only one job before it was deleted, \n    // don't fail for a test that an array is returned.\n    delete tests[\"features is array\"];\n}\n\ntests[\"Forgotten Job still available in list by_scene\"] = found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1493144698466,
			"name": "Verify Forgotten - List Jobs by Scene",
			"description": "Check that a forgotten job is not available in the jobs listed by scene.",
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List all jobs filtered by scene ID, making sure the remembered rob has returned.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "9944dbf2-4a66-481f-8855-82e6cb74c11e",
			"method": "GET",
			"name": "Remembered Job in List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n}\n\ntests[\"Job found in list of jobs\"] = found;",
			"time": 1486570123911,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Referer: https://beachfront.stage.geointservices.io/v0/user\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "a037f06e-128d-1202-35c7-c4eab0e7e382",
			"method": "GET",
			"name": "Invalid CORS - Just Referer",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570152928,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api accepts a CORS request from beachfront.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Origin: https://beachfront.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "a695db6c-a3af-e754-d85a-892a00768197",
			"method": "GET",
			"name": "Valid CORS - Beachfront",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570151182,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Validate that the url given for the WMS service is valid.",
			"folder": "89dc584b-785b-4439-c252-2a87130d45ea",
			"headers": "",
			"helperAttributes": {},
			"id": "ad936e0f-2304-13e4-9022-3b809f8cd6ff",
			"method": "GET",
			"name": "Validate WMS URL",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570029778,
			"url": "{{wms_server_url}}"
		},
		{
			"id": "ad996b67-337e-6ddd-eaef-759f80842c21",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/landsat:{{landsatId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === ('landsat:' + postman.getEnvironmentVariable('landsatId'));\n        }\n    }\n    postman.setEnvironmentVariable('active jobs - scene', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1493144623785,
			"name": "List Jobs by Scene",
			"description": "List all jobs filtered by scene ID, making sure the just created job is present.",
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that another user's job was removed from the job list after the primary user forgot it.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "af9ec773-202d-ffe4-e739-7f36e1f5a93d",
			"method": "GET",
			"name": "Verify - Other Job no longer in List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job not available in list\"] = !found;",
			"time": 1486570130662,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List all jobs the user can see, making sure the just created job is present.",
			"folder": "e4a7d3fd-b826-dbe4-cd14-186663da434f",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "be0417c7-3c67-0fec-0bc2-2d66b8991aaa",
			"method": "GET",
			"name": "List Jobs",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n    postman.setEnvironmentVariable('active jobs', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;",
			"time": 1486570085774,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that another user's job remained in the job list even after that other user forgot that job.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "bf5994e5-712d-8591-95f2-a07b14eb8928",
			"method": "GET",
			"name": "Verify - Other Job Still in List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job available in list\"] = found;",
			"time": 1486570129150,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check for a 404 response when trying to forget a job that does not exist.",
			"folder": "9d5f63b0-9230-8d71-9653-cb136f02deb1",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "c4782cdc-b437-1280-a5a1-9f1d3ecb6849",
			"method": "DELETE",
			"name": "Forget Fake Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"time": 1486570134038,
			"url": "https://bf-api.{{domain}}/v0/job/foo"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/job endpoint.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "c7e1b9fa-9bee-4e0e-e173-5c3eeb36e91a",
			"method": "POST",
			"name": "HTTP Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570147710,
			"url": "http://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List the algoithms in use by BF.",
			"folder": "89dc584b-785b-4439-c252-2a87130d45ea",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "c937b341-8fa7-730b-1aa1-26ff1a84ab80",
			"method": "GET",
			"name": "List Algorithms",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'algorithms', 'array')) {\n    for (i = 0; i < data.algorithms.length; i++) {\n        testLevels(tests, data.algorithms[i], 'description', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'interface', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'max_cloud_cover', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'name', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'service_id', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'version', 'skip', 'algorithms[].');\n    }\n    if (testLevels(tests, data.algorithms[0], 'service_id', 'skip', 'algorithms[].')) {\n        postman.setEnvironmentVariable('algServiceId', data.algorithms[0].service_id);\n    }\n}",
			"time": 1486569677587,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without specifying a scene_id.",
			"folder": "9d5f63b0-9230-8d71-9653-cb136f02deb1",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "c97e3a92-2e23-858f-3e6c-0bcf31992ff7",
			"method": "POST",
			"name": "Create Job - Missing scene_id",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'scene_id' mentioned in message\"] = responseBody.match(/scene_id/);",
			"time": 1486570135632,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check that the shoreline calculation job was successful.",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "cbc9d204-c670-7451-cb65-a7eff3e78f40",
			"method": "GET",
			"name": "Check Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'job.properties.status')) {\n    if (data.job.properties.status === 'Running' || data.job.properties.status === 'Submitted' || data.job.properties.status === 'Pending') {\n        if (parseInt(postman.getEnvironmentVariable('retry_loop')) < parseInt(postman.getEnvironmentVariable('max_retries'))) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Job Status');\n            wait(30000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            tests[\"status is still \" + data.job.properties.status] = false;\n            postman.setEnvironmentVariable('retry_loop','0');\n        }\n    }\n    else if (data.job.properties.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop','0');\n        tests[\"Job finished in time\"] = true;\n    }\n    else {\n        tests[\"status should not be \" + data.job.properties.status] = false;\n        postman.setEnvironmentVariable('retry_loop','0');\n    }\n}",
			"time": 1487359062744,
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"folder": "e4a7d3fd-b826-dbe4-cd14-186663da434f"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the metadata of a specific algorithm.",
			"folder": "89dc584b-785b-4439-c252-2a87130d45ea",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "ce479973-215e-a440-0a66-6f8f0e8854c7",
			"method": "GET",
			"name": "Get Algorithm",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntestLevels(tests, data, 'algorithm.description');\ntestLevels(tests, data, 'algorithm.interface');\ntestLevels(tests, data, 'algorithm.max_cloud_cover');\ntestLevels(tests, data, 'algorithm.name');\nif (testLevels(tests, data.algorithm, 'service_id')) {\n    tests[\"Correct service_id returned\"] = postman.getEnvironmentVariable('algServiceId') === data.algorithm.service_id;\n}\ntestLevels(tests, data, 'algorithm.version');",
			"time": 1486569670819,
			"url": "https://bf-api.{{domain}}/v0/algorithm/{{algServiceId}}",
			"rawModeData": ""
		},
		{
			"id": "ddfbbaea-7d4e-3de9-3e78-ec7d0f0981d6",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-60);\nd_string = d.toISOString();\npostman.setEnvironmentVariable('TwoDaysAgo', d.toISOString()); // Actually 60 days ago\n\npostman.setEnvironmentVariable('retry_loop', '0');\npostman.setEnvironmentVariable('max_retries', 20);\npostman.setEnvironmentVariable('PL Name', 'IntegrationTest_SriLanka');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493144359817,
			"name": "Health Check",
			"description": "Check that the app responds at all.",
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"rawModeData": ""
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get a list of services in use by BF.",
			"folder": "89dc584b-785b-4439-c252-2a87130d45ea",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "ea3d1a0b-0a1e-708b-ff35-38e842b36f16",
			"method": "GET",
			"name": "Get Services",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'services.catalog')) {\n    postman.setEnvironmentVariable('catalog_url', data.services.catalog);\n}\nif (testLevels(tests, data, 'services.wms_server')) {\n    postman.setEnvironmentVariable('wms_server_url', data.services.wms_server.replace('https', 'http'));\n}\nif (testLevels(tests, data, 'profile.username')) {\n    tests[\"Correct username returned\"] = data.profile.username === postman.getEnvironmentVariable('bf_user_1');\n}",
			"time": 1486570023733,
			"url": "https://bf-api.{{domain}}/v0/user",
			"rawModeData": ""
		},
		{
			"id": "ef087538-0b2d-895b-cf32-f0170aa2a952",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'job.id')) {\n    postman.setEnvironmentVariable('jobId_other', data.job.id);\n}\ntestLevels(tests, data, 'job.geometry');\nif (testLevels(tests, data, 'job.properties.created_by')) {\n    tests[\"Created by not the main user\"] = postman.getEnvironmentVariable('bf_user_2') === data.job.properties.created_by;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_2}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1493144942920,
			"name": "Create Job from Another User",
			"description": "Start a shoreline calculation job, under a different user.\nCreating this job serves the purpose of making it visible to the primary user in this test.",
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"landsat:{{landsatId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check for a 404 response when trying to get the status of a job that does not exist.",
			"folder": "9d5f63b0-9230-8d71-9653-cb136f02deb1",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "f17af5b4-0480-5e8a-4005-482e4ddff1d5",
			"method": "GET",
			"name": "Check Fake Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"time": 1486570131518,
			"url": "https://bf-api.{{domain}}/v0/job/foo"
		},
		{
			"collectionId": "d006d400-16a5-1221-e529-28f11b17df5b",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that another user's job was added to the job list.",
			"folder": "1bf122ab-9aed-8e42-f427-ec450f87cf91",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "f89e957b-c42c-e6dc-4485-7ed5c358d13e",
			"method": "GET",
			"name": "Verify - Other Job added to List",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job available in list\"] = found;",
			"time": 1486570127664,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": ""
		}
	]
}