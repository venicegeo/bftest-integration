{
	"id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
	"name": "BF-IA-Broker_landsat_static",
	"description": "",
	"order": [],
	"folders": [
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"description": "",
			"folders_order": [],
			"id": "6486959f-cc11-88fb-82a4-41747143a376",
			"name": "01_Startup",
			"order": [
				"8f567501-b54c-38d4-0c77-23fe286a49db"
			],
			"owner": "1764447"
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"description": "",
			"folders_order": [],
			"id": "06e42180-d446-b796-6f9f-b2f5f8e8eef8",
			"name": "02_High",
			"order": [
				"e57728d7-1f28-45ff-576e-cd95a311342a",
				"51305ae6-40e1-7ad0-14d1-cdba645e7d5f",
				"46f3fa95-e4cd-8209-8b95-96f71daf4aed",
				"e572201e-a542-97d5-2501-36ea4ea97385"
			],
			"owner": "1764447"
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"description": "",
			"folders_order": [],
			"id": "bcb66f16-6e5d-b93b-7dd9-b5e23d4b8cce",
			"name": "03_Medium",
			"order": [
				"a46615a8-3cf1-40a0-36fa-15361674f545",
				"ffc8ad84-b159-38f9-c71e-a29f9fa626c2",
				"812ce0af-9cb0-1238-83cc-b60e141ce0b2",
				"98c44bac-1a54-8cde-1a3f-6bda3416dcf8",
				"4a8262e8-183d-15bb-2e44-3e74cb0621d7",
				"60b3e7aa-c303-6eb5-082d-fd66d773ce5e"
			],
			"owner": "1764447"
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"description": "",
			"folders_order": [],
			"id": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"name": "04_Low",
			"order": [
				"d3ba4df2-f55a-8f40-1d39-77022cce42c8",
				"35d60c4f-e037-e925-d186-cb2c41376dcf",
				"018a996d-3088-d6bd-714e-9986163a645d",
				"b8b936da-9179-0738-0919-1f81956bc9ea",
				"fbcbf384-466c-f27b-84c8-7fd20dd3fd2e",
				"d0644ab9-75d3-2ac5-f307-7c248b62b04f",
				"47d67210-7b3d-c386-8382-7cbbfcd082e7",
				"a331099f-7bbc-2d78-716c-b35b527640b9",
				"f17c3ac0-d4e7-c66b-a977-5e70c2a929ac",
				"e793e545-e9fc-9958-aa18-7c481b75359a"
			],
			"owner": "1764447"
		}
	],
	"folders_order": [
		"6486959f-cc11-88fb-82a4-41747143a376",
		"06e42180-d446-b796-6f9f-b2f5f8e8eef8",
		"bcb66f16-6e5d-b93b-7dd9-b5e23d4b8cce",
		"eec71a9f-7f85-79be-9f66-16f0d1a0c398"
	],
	"timestamp": 1492613558533,
	"owner": "1764447",
	"public": false,
	"requests": [
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover landsat images using an out-of-bounds bbox",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "018a996d-3088-d6bd-714e-9986163a645d",
			"method": "GET",
			"name": "Discover - Out-of-Bounds bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "185,195,200,365"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
			"time": 1496925648156,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&bbox=185,195,200,365",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover landsat images using an invalid bbox",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "35d60c4f-e037-e925-d186-cb2c41376dcf",
			"method": "GET",
			"name": "Discover - Invalid bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "foo"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'bbox'\"] = responseBody.match(/bbox/i);",
			"time": 1496925604994,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&bbox=foo",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Get the tide at a given point and time.",
			"folder": "06e42180-d446-b796-6f9f-b2f5f8e8eef8",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {},
			"id": "46f3fa95-e4cd-8209-8b95-96f71daf4aed",
			"method": "POST",
			"name": "Get Tides Directly",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": "{\n\t\"lat\": {{lat}},\n\t\"lon\": {{lon}},\n\t\"dtg\": \"{{acquiredDate}}\"\n}",
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'currentTide', 'number')) {\n    postman.setEnvironmentVariable('currentTide', data.currentTide);\n}\nif (testLevels(tests, data, 'maximumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('maximumTide24Hours', data.maximumTide24Hours);\n}\nif (testLevels(tests, data, 'minimumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('minimumTide24Hours', data.minimumTide24Hours);\n}",
			"time": 1496677784057,
			"url": "https://bf-tideprediction.{{domain}}",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headers": "",
			"helperAttributes": {},
			"id": "47d67210-7b3d-c386-8382-7cbbfcd082e7",
			"isFromCollection": true,
			"method": "GET",
			"name": "Discover - Bad PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"time": 1489597264291,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye?PL_API_KEY=foo",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"acquiredDate\" & \"maxAcquiredDate\" as the query parameters.",
			"folder": "bcb66f16-6e5d-b93b-7dd9-b5e23d4b8cce",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "4a8262e8-183d-15bb-2e44-3e74cb0621d7",
			"method": "GET",
			"name": "Discover Landsat - Date Range",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo') || data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('twoDaysAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are within the defined date range\"] = match_date;",
			"time": 1496925599630,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}&maxAcquiredDate={{twoDaysAgo}}",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Get the metadata of a single Landsat image.",
			"folder": "06e42180-d446-b796-6f9f-b2f5f8e8eef8",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "51305ae6-40e1-7ad0-14d1-cdba645e7d5f",
			"method": "GET",
			"name": "Get Landsat",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "tides",
					"value": "false"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar noTest = {};\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('landsatId') == data.id;\n}\nif (testLevels(tests, data, 'bbox', 'array')) {\n    tests[\"Full bounding box available\"] = data.bbox.length == 4;\n    postman.setEnvironmentVariable('lon', (data.bbox[0] + data.bbox[2])/2);\n    postman.setEnvironmentVariable('lat', (data.bbox[1] + data.bbox[3])/2);\n}\nif (testLevels(tests, data, 'properties.acquiredDate')) {\n    var d = new Date(data.properties.acquiredDate);\n    var datestring = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + '-' + d.getUTCHours() + '-' + d.getMinutes();\n    postman.setEnvironmentVariable('acquiredDate', datestring);\n}\n\ntests[\"Tides should not be included in the result\"] = !testLevels(noTest, data, 'properties.CurrentTide') && !testLevels(noTest, data, 'properties.MaximumTide24Hours') && !testLevels(noTest, data, 'properties.MinimumTide24Hours');",
			"time": 1496678023850,
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/{{landsatId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=false",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"bbox\", \"cloudCover\", \"acquiredDate\", & \"maxAcquiredDate\" as the query parameters.",
			"folder": "bcb66f16-6e5d-b93b-7dd9-b5e23d4b8cce",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "60b3e7aa-c303-6eb5-082d-fd66d773ce5e",
			"method": "GET",
			"name": "Discover Landsat - dates, cc, & bb",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "{{bbox}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "cloudCover",
					"value": "{{cloudCover}}"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\nvar match_bb = true;\nvar match_cc = true;\n\nfunction checkIntersection(imgBB, srcBB, threshold) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n    var latIntersect = (imgBB[0]+threshold >= srcBB[0] && imgBB[0] <= srcBB[2]+threshold) || (srcBB[0]+threshold >= imgBB[0] && srcBB[0] <= imgBB[2]+threshold);\n    var lonIntersect = (imgBB[1]+threshold >= srcBB[1] && imgBB[1] <= srcBB[3]+threshold) || (srcBB[1]+threshold >= imgBB[1] && srcBB[1] <= imgBB[3]+threshold);\n    return latIntersect && lonIntersect;\n}\n\nsrcBB = postman.getEnvironmentVariable('bbox').split(',').map(Number);\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo') || data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('twoDaysAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n        if (testLevels(tests, data.features[i], 'bbox', 'skip', 'features[0].')) {\n            imgBB = data.features[i].bbox;\n            if (!checkIntersection(imgBB, srcBB, 0.001)) {\n                // 0.001 degree threshold is arbitrary\n                match_bb = false;\n                console.log(data.features[i].id);\n            }\n        }\n        if (testLevels(tests, data.features[i], 'properties.cloudCover', 'skip', 'features[0].')) {\n            if (data.features[i].properties.cloudCover > parseFloat(postman.getEnvironmentVariable('cloudCover'))) {\n                match_cc = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are after the defined acquiredDate\"] = match_date;\ntests[\"All returned images intersect the defined bounding box\"] = match_bb;\ntests[\"All returned images are below the defined cloud cover\"] = match_cc;",
			"time": 1507750373460,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}&maxAcquiredDate={{twoDaysAgo}}&bbox={{bbox}}&cloudCover={{cloudCover}}",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"acquiredDate\" as the only query parameter.",
			"folder": "bcb66f16-6e5d-b93b-7dd9-b5e23d4b8cce",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "812ce0af-9cb0-1238-83cc-b60e141ce0b2",
			"method": "GET",
			"name": "Discover Landsat - acquiredDate",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are after the defined acquiredDate\"] = match_date;",
			"time": 1496861487215,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Check that the app responds at all.",
			"folder": "6486959f-cc11-88fb-82a4-41747143a376",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {},
			"id": "8f567501-b54c-38d4-0c77-23fe286a49db",
			"method": "GET",
			"name": "Health Check",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": "",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-2);\npostman.setEnvironmentVariable('twoDaysAgo', d.toISOString());\nd.setMonth(d.getMonth()-5);\npostman.setEnvironmentVariable('fiveMonthsAgo', d.toISOString());\npostman.setEnvironmentVariable('retry_loop', \"0\");\npostman.setEnvironmentVariable('max_retries', 25);\npostman.setEnvironmentVariable('bbox', '9,46,17,50');\npostman.setEnvironmentVariable('cloudCover', '0.75');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"time": 1496858622472,
			"url": "https://bf-ia-broker.{{domain}}"
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"maxAcquiredDate\" as the only query parameter.",
			"folder": "bcb66f16-6e5d-b93b-7dd9-b5e23d4b8cce",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "98c44bac-1a54-8cde-1a3f-6bda3416dcf8",
			"method": "GET",
			"name": "Discover Landsat - maxAcquiredDate",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{fiveMonthsAgo}}"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('fiveMonthsAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are before the defined acquiredDate\"] = match_date;",
			"time": 1496870438378,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{fiveMonthsAgo}}",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headers": "",
			"helperAttributes": {},
			"id": "a331099f-7bbc-2d78-716c-b35b527640b9",
			"isFromCollection": true,
			"method": "POST",
			"name": "Activate - Bad PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"time": 1489597279259,
			"url": "https://bf-ia-broker.{{domain}}/planet/activate/rapideye/20170310_023105_5125803_RapidEye-3?PL_API_KEY=foo",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"bbox\" as the only query parameter.",
			"folder": "bcb66f16-6e5d-b93b-7dd9-b5e23d4b8cce",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "a46615a8-3cf1-40a0-36fa-15361674f545",
			"method": "GET",
			"name": "Discover Landsat - bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "{{bbox}}"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_bb = true;\n\nfunction checkIntersection(imgBB, srcBB, threshold) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n    var latIntersect = (imgBB[0]+threshold >= srcBB[0] && imgBB[0] <= srcBB[2]+threshold) || (srcBB[0]+threshold >= imgBB[0] && srcBB[0] <= imgBB[2]+threshold);\n    var lonIntersect = (imgBB[1]+threshold >= srcBB[1] && imgBB[1] <= srcBB[3]+threshold) || (srcBB[1]+threshold >= imgBB[1] && srcBB[1] <= imgBB[3]+threshold);\n    return latIntersect && lonIntersect;\n}\n\nsrcBB = postman.getEnvironmentVariable('bbox').split(',').map(Number);\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'bbox', 'skip', 'features[0].')) {\n            imgBB = data.features[i].bbox;\n            if (!checkIntersection(imgBB, srcBB, 0.001)) {\n                // 0.001 degree threshold is arbitrary\n                match_bb = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images intersect the defined bounding box\"] = match_bb;",
			"time": 1507750345518,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&bbox={{bbox}}",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover landsat images using a string cloudCover.",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "b8b936da-9179-0738-0919-1f81956bc9ea",
			"isLastRequest": true,
			"method": "GET",
			"name": "Discover - Invalid cloudCover",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "cloudCover",
					"value": "foo"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'cloudCover'\"] = responseBody.match(/cloud.*cover/i);",
			"time": 1496926346517,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&cloudCover=foo",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover without supplying a PL key.",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headers": "",
			"helperAttributes": {},
			"id": "d0644ab9-75d3-2ac5-f307-7c248b62b04f",
			"method": "GET",
			"name": "Discover - No PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem missing planet labs key\"] = responseBody.match(/planet/i) && responseBody.match(/key/i);",
			"time": 1485549129412,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover landsat images using a reversed bbox",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "d3ba4df2-f55a-8f40-1d39-77022cce42c8",
			"method": "GET",
			"name": "Discover - Reversed bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "17,9,16,8"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'bbox'\"] = responseBody.match(/bbox/i);",
			"time": 1496863263332,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&bbox=17,9,16,8",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Get the metadata of a single Landsat image, including the tideprediction results in the metadata.",
			"folder": "06e42180-d446-b796-6f9f-b2f5f8e8eef8",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "e572201e-a542-97d5-2501-36ea4ea97385",
			"method": "GET",
			"name": "Get Landsat with tides",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "tides",
					"value": "true"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('landsatId') == data.id;\n}\nif (testLevels(tests, data, 'properties.CurrentTide')) {\n    tests[\"CurrentTide is correct\"] = data.properties.CurrentTide <= 1.1*parseFloat(postman.getEnvironmentVariable('currentTide')) && data.properties.CurrentTide >= 0.9*parseFloat(postman.getEnvironmentVariable('currentTide'));\n}\nif (testLevels(tests, data, 'properties.MaximumTide24Hours')) {\n    tests[\"MaximumTide24Hours is correct\"] = data.properties.MaximumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours')) && data.properties.MaximumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours'));\n}\nif (testLevels(tests, data, 'properties.MinimumTide24Hours')) {\n    tests[\"MinimumTide24Hours is correct\"] = data.properties.MinimumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours')) && data.properties.MinimumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours'));\n}",
			"time": 1496342600587,
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/{{landsatId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=true",
			"version": 2
		},
		{
			"id": "e57728d7-1f28-45ff-576e-cd95a311342a",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{twoDaysAgo}}",
			"folder": "06e42180-d446-b796-6f9f-b2f5f8e8eef8",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nvar results = '';\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'id', 'skip', 'features[0].')) {\n            results = data.features[i].id + ',' + results;\n        }\n    }\n}\ntests[\"All returned images are landsat\"] = match;\npostman.setEnvironmentVariable('landsatId', 'LC82200802016308LGN00');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1508164228802,
			"name": "Discover Landsat",
			"description": "Query the catalog for Landsat images.",
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"responses": []
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to get the metadata of a single Landsat image while using an invalid PL Key",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headers": "",
			"helperAttributes": {},
			"id": "e793e545-e9fc-9958-aa18-7c481b75359a",
			"method": "GET",
			"name": "Get Metadata - Bad PL Key",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"time": 1493050223947,
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/{{landsatId}}?PL_API_KEY=foo",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to retrieve the metadata of a scene that does not exist.",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headers": "",
			"helperAttributes": {},
			"id": "f17c3ac0-d4e7-c66b-a977-5e70c2a929ac",
			"method": "GET",
			"name": "Get Metadata - Invalid Id",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 404 (Bug #15689)\"] = responseCode.code === 404;\ntests[\"'Not Found' message\"] = responseBody.match(/no/i);",
			"time": 1493050185906,
			"url": "https://bf-ia-broker.{{domain}}/planet/landsat/foo?PL_API_KEY={{PL API - NO COMMIT}}",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover using an invalid item type.",
			"folder": "eec71a9f-7f85-79be-9f66-16f0d1a0c398",
			"headers": "",
			"helperAttributes": {},
			"id": "fbcbf384-466c-f27b-84c8-7fd20dd3fd2e",
			"method": "GET",
			"name": "Discover - Bad Item Type",
			"pathVariables": {},
			"preRequestScript": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem with item type\"] = responseBody.match(/item.*type/i);\ntests[\"'foo' is in reponse\"] = responseBody.match(/foo/i);",
			"time": 1485549069664,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/foo?PL_API_KEY={{PL API - NO COMMIT}}",
			"version": 2
		},
		{
			"collectionId": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"collection_id": "8fa68c1d-80e9-9de4-2365-6d26e355d870",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"cloudCover\" as the only query parameter.",
			"folder": "bcb66f16-6e5d-b93b-7dd9-b5e23d4b8cce",
			"headerData": [],
			"headers": "",
			"helperAttributes": {},
			"id": "ffc8ad84-b159-38f9-c71e-a29f9fa626c2",
			"method": "GET",
			"name": "Discover Landsat - cloudCover",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "cloudCover",
					"value": "{{cloudCover}}"
				}
			],
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_cc = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/landsat/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.cloudCover', 'skip', 'features[0].')) {\n            if (data.features[i].properties.cloudCover > parseFloat(postman.getEnvironmentVariable('cloudCover'))) {\n                match_cc = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are landsat\"] = match;\ntests[\"All returned images are below the defined cloud cover\"] = match_cc;",
			"time": 1496861461696,
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&cloudCover={{cloudCover}}",
			"version": 2
		}
	]
}