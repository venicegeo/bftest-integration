{
	"info": {
		"name": "BF_API__landsat_static",
		"_postman_id": "e1a499a4-b643-3ea1-07eb-7b513aa80446",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01_Startup",
			"description": "",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"postman.setEnvironmentVariable('retry_loop', '0');",
									"postman.setEnvironmentVariable('max_retries', 20);",
									"// Picking a simple scene, to minimize the size of the job result.",
									"postman.setEnvironmentVariable('landsatId', 'LC80351692017214LGN00'); ",
									"",
									"tests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							]
						},
						"description": "Check that the app responds at all."
					},
					"response": []
				},
				{
					"name": "List Algorithms",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'algorithms', 'array')) {",
									"    for (i = 0; i < data.algorithms.length; i++) {",
									"        testLevels(tests, data.algorithms[i], 'description', 'skip', 'algorithms[].');",
									"        testLevels(tests, data.algorithms[i], 'max_cloud_cover', 'skip', 'algorithms[].');",
									"        testLevels(tests, data.algorithms[i], 'interface', 'skip', 'algorithms[].');",
									"        testLevels(tests, data.algorithms[i], 'version', 'skip', 'algorithms[].');",
									"        if (testLevels(tests, data.algorithms[i], 'name', 'string', 'algorithms[].')) {",
									"            if (data.algorithms[i].name == \"NDWI_PY\") {",
									"                if (testLevels(tests, data.algorithms[i], 'service_id', 'skip', 'algorithms[].')) {",
									"                    postman.setEnvironmentVariable('algServiceId', data.algorithms[i].service_id);",
									"                    break;",
									"                }",
									"            }",
									"        }",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/algorithm",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm"
							]
						},
						"description": "List the algoithms in use by BF."
					},
					"response": []
				},
				{
					"name": "Get Algorithm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"testLevels(tests, data, 'algorithm.description');",
									"testLevels(tests, data, 'algorithm.interface');",
									"testLevels(tests, data, 'algorithm.max_cloud_cover');",
									"testLevels(tests, data, 'algorithm.name');",
									"if (testLevels(tests, data.algorithm, 'service_id')) {",
									"    tests[\"Correct service_id returned\"] = postman.getEnvironmentVariable('algServiceId') === data.algorithm.service_id;",
									"}",
									"testLevels(tests, data, 'algorithm.version');"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/algorithm/{{algServiceId}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm",
								"{{algServiceId}}"
							]
						},
						"description": "Get the metadata of a specific algorithm."
					},
					"response": []
				},
				{
					"name": "Get Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"var data = parseJSON(tests, responseBody);",
									"",
									"if (testLevels(tests, data, 'services.catalog')) {",
									"    postman.setEnvironmentVariable('catalog_url', data.services.catalog);",
									"}",
									"if (testLevels(tests, data, 'services.wms_server')) {",
									"    postman.setEnvironmentVariable('wms_server_url', data.services.wms_server.replace('https', 'http'));",
									"}",
									"if (testLevels(tests, data, 'profile.username')) {",
									"    tests[\"Correct username returned\"] = data.profile.username === postman.getEnvironmentVariable('bf_user_1');",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/user",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"user"
							]
						},
						"description": "Get a list of services in use by BF."
					},
					"response": []
				},
				{
					"name": "Validate Catalog URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{catalog_url}}",
							"host": [
								"{{catalog_url}}"
							]
						},
						"description": "Validate that the url given for the catalog service is valid"
					},
					"response": []
				},
				{
					"name": "Validate WMS URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{wms_server_url}}",
							"host": [
								"{{wms_server_url}}"
							]
						},
						"description": "Validate that the url given for the WMS service is valid."
					},
					"response": []
				}
			]
		},
		{
			"name": "02_High",
			"description": "",
			"item": [
				{
					"name": "Create Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"var data = parseJSON(tests, responseBody);",
									"",
									"if (testLevels(tests, data, 'job.id')) {",
									"    postman.setEnvironmentVariable('jobId', data.job.id);",
									"}",
									"testLevels(tests, data, 'job.geometry');",
									"if (testLevels(tests, data, 'job.properties.created_by')) {",
									"    tests[\"Correct User\"] = postman.getEnvironmentVariable('bf_user_1') === data.job.properties.created_by;",
									"}",
									"// if (testLevels(tests, data, 'job.properties.created_on', 'string')) {",
									"//     tests[\"'created_on' is formatted correctly\"] = data.job.properties.created_on.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|\\+\\d{2}:\\d{2})$/);",
									"// } // Bug #15999",
									"if (testLevels(tests, data, 'job.properties.scene_time_of_collect', 'string')) {",
									"    tests[\"'scene_time_of_collect' is formatted correctly\"] = data.job.properties.scene_time_of_collect.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|\\+\\d{2}:\\d{2})$/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"landsat:{{landsatId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Start a shoreline calculation job."
					},
					"response": []
				},
				{
					"name": "Check Job Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"var data = parseJSON(tests, responseBody);",
									"",
									"if (testLevels(tests, data, 'job.properties.status')) {",
									"    if (data.job.properties.status === 'Running' || data.job.properties.status === 'Submitted' || data.job.properties.status === 'Pending') {",
									"        if (parseInt(postman.getEnvironmentVariable('retry_loop')) < parseInt(postman.getEnvironmentVariable('max_retries'))) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Check Job Status');",
									"            wait(20000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            tests[\"status is still \" + data.job.properties.status] = false;",
									"            postman.setEnvironmentVariable('retry_loop','0');",
									"        }",
									"    }",
									"    else if (data.job.properties.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop','0');",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'job.properties.created_on', 'string')) {",
									"            tests[\"'created_on' is formatted correctly\"] = data.job.properties.created_on.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|\\+\\d{2}:\\d{2})$/);",
									"        }",
									"        if (testLevels(tests, data, 'job.properties.scene_time_of_collect', 'string')) {",
									"            tests[\"'scene_time_of_collect' is formatted correctly\"] = data.job.properties.scene_time_of_collect.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|\\+\\d{2}:\\d{2})$/);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.job.properties.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop','0');",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"{{jobId}}"
							]
						},
						"description": "Check that the shoreline calculation job was successful."
					},
					"response": []
				},
				{
					"name": "List Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var found = false;",
									"",
									"if (testLevels(tests, data, 'jobs.features', 'array')) {",
									"    for (i = 0; i < data.jobs.features.length; i++) {",
									"        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {",
									"            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable('active jobs', data.jobs.features.length);",
									"}",
									"",
									"tests[\"Job found in list of jobs\"] = found;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "List all jobs the user can see, making sure the just created job is present."
					},
					"response": []
				},
				{
					"name": "List Jobs by Scene",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var found = false;",
									"var match = true;",
									"",
									"if (testLevels(tests, data, 'jobs.features', 'array')) {",
									"    for (i = 0; i < data.jobs.features.length; i++) {",
									"        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {",
									"            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');",
									"        }",
									"        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {",
									"            match = match && data.jobs.features[i].properties.scene_id === ('landsat:' + postman.getEnvironmentVariable('landsatId'));",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable('active jobs - scene', data.jobs.features.length);",
									"}",
									"",
									"tests[\"Job found in list of jobs\"] = found;",
									"tests[\"All jobs had specified scene_id\"] = match;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/by_scene/landsat:{{landsatId}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"by_scene",
								"landsat:{{landsatId}}"
							]
						},
						"description": "List all jobs filtered by scene ID, making sure the just created job is present."
					},
					"response": []
				},
				{
					"name": "Get Geojson",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"var data = parseJSON(tests, responseBody);",
									"",
									"var correct_job_id = true;",
									"var correct_alg = true;",
									"var no_targeting = true;",
									"var unclass = true;",
									"",
									"if(testLevels(tests, data, 'features', 'array')) {",
									"    for (i = 0; i < data.features.length; i++) {",
									"        if (testLevels(tests, data.features[i], 'properties.job_id', 'skip', 'features[].')) {",
									"            correct_job_id = correct_job_id && postman.getEnvironmentVariable('jobId') == data.features[i].properties.job_id;",
									"        }",
									"        if (testLevels(tests, data.features[i], 'properties.algorithm_id', 'skip', 'features[].')) {",
									"            correct_alg = correct_alg && postman.getEnvironmentVariable('algServiceId') == data.features[i].properties.algorithm_id;",
									"        }",
									"        if (testLevels(tests, data.features[i], 'properties.data_usage', 'string', 'features[].')) {",
									"            no_targeting = no_targeting && data.features[i].properties.data_usage.match(/no.*tar/i) && data.features[i].properties.data_usage.match(/no.*nav/i);",
									"        }",
									"        if (testLevels(tests, data.features[i], 'properties.classification', 'string', 'features[].')) {",
									"            unclass = unclass && data.features[i].properties.classification.match(/unclass/i);",
									"        }",
									"    }",
									"}",
									"tests[\"each element had correct 'job_id' value\"] = correct_job_id;",
									"tests[\"each element had correct 'algorithm_id' value\"] = correct_alg;",
									"tests[\"each element had a 'not for targetting/navigation' message\"] = no_targeting;",
									"tests[\"each element had an unclass message\"] = unclass;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/{{jobId}}.geojson",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"{{jobId}}.geojson"
							]
						},
						"description": "Get the geojson output of a successful job"
					},
					"response": []
				}
			]
		},
		{
			"name": "03_Medium",
			"description": "",
			"item": [
				{
					"name": "Forget Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId'));"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"{{jobId}}"
							]
						},
						"description": "Remove a job from the user's list of visible jobs,"
					},
					"response": []
				},
				{
					"name": "Verify Forgotten - List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var found = false;",
									"",
									"if (testLevels(tests, data, 'jobs.features', 'array')) {",
									"    for (i = 0; i < data.jobs.features.length; i++) {",
									"        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {",
									"            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');",
									"        }",
									"    }",
									"}",
									"if (parseInt(postman.getEnvironmentVariable('active jobs')) == 1) {",
									"    // If there was only one job before it was deleted, ",
									"    // don't fail for a test that an array is returned.",
									"    delete tests[\"features is array\"];",
									"}",
									"",
									"tests[\"Job not available in list\"] = !found;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Check that a forgotten job is not available in the job list."
					},
					"response": []
				},
				{
					"name": "Verify Forgotten - List Jobs by Scene",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var found = false;",
									"var match = true;",
									"",
									"if (testLevels(tests, data, 'jobs.features', 'array')) {",
									"    for (i = 0; i < data.jobs.features.length; i++) {",
									"        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {",
									"            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');",
									"        }",
									"        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {",
									"            match = match && data.jobs.features[i].properties.scene_id === ('landsat:' + postman.getEnvironmentVariable('landsatId'));",
									"        }",
									"    }",
									"}",
									"if (parseInt(postman.getEnvironmentVariable('active jobs - scene')) == 1) {",
									"    // If there was only one job before it was deleted, ",
									"    // don't fail for a test that an array is returned.",
									"    delete tests[\"features is array\"];",
									"}",
									"",
									"tests[\"Forgotten Job still available in list by_scene\"] = found;",
									"tests[\"All jobs had specified scene_id\"] = match;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/by_scene/landsat:{{landsatId}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"by_scene",
								"landsat:{{landsatId}}"
							]
						},
						"description": "Check that a forgotten job is not available in the jobs listed by scene."
					},
					"response": []
				},
				{
					"name": "Remember Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"var data = parseJSON(tests, responseBody);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"{{jobId}}"
							]
						},
						"description": "Check the job status of a forgotten job, for the purpose of returning it to the job list."
					},
					"response": []
				},
				{
					"name": "Remembered Job in List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var found = false;",
									"",
									"if (testLevels(tests, data, 'jobs.features', 'array')) {",
									"    for (i = 0; i < data.jobs.features.length; i++) {",
									"        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {",
									"            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Job found in list of jobs\"] = found;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "List all jobs filtered by scene ID, making sure the remembered rob has returned."
					},
					"response": []
				},
				{
					"name": "Create Job from Another User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"var data = parseJSON(tests, responseBody);",
									"",
									"if (testLevels(tests, data, 'job.id')) {",
									"    postman.setEnvironmentVariable('jobId_other', data.job.id);",
									"}",
									"testLevels(tests, data, 'job.geometry');",
									"if (testLevels(tests, data, 'job.properties.created_by')) {",
									"    tests[\"Created by not the main user\"] = postman.getEnvironmentVariable('bf_user_2') === data.job.properties.created_by;",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_2}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"landsat:{{landsatId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Start a shoreline calculation job, under a different user.\nCreating this job serves the purpose of making it visible to the primary user in this test."
					},
					"response": []
				},
				{
					"name": "Verify - Other Job not in  List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var found = false;",
									"",
									"if (testLevels(tests, data, 'jobs.features', 'array')) {",
									"    for (i = 0; i < data.jobs.features.length; i++) {",
									"        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {",
									"            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Job not available in list\"] = !found;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Check that another user's job was not in the job list."
					},
					"response": []
				},
				{
					"name": "Check Other User's Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));",
									"var data = parseJSON(tests, responseBody);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"{{jobId_other}}"
							]
						},
						"description": "Check the job status of another user's job, for the purpose of adding it to the job list."
					},
					"response": []
				},
				{
					"name": "Verify - Other Job added to List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var found = false;",
									"",
									"if (testLevels(tests, data, 'jobs.features', 'array')) {",
									"    for (i = 0; i < data.jobs.features.length; i++) {",
									"        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {",
									"            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Job available in list\"] = found;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Check that another user's job was added to the job list."
					},
					"response": []
				},
				{
					"name": "Have Other User Forget Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_2}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"{{jobId_other}}"
							]
						},
						"description": "Remove a job from the other user's list of visible jobs.\nThis should not remove the job from the primary user's list."
					},
					"response": []
				},
				{
					"name": "Verify - Other Job Still in List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var found = false;",
									"",
									"if (testLevels(tests, data, 'jobs.features', 'array')) {",
									"    for (i = 0; i < data.jobs.features.length; i++) {",
									"        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {",
									"            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Job available in list\"] = found;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Check that another user's job remained in the job list even after that other user forgot that job."
					},
					"response": []
				},
				{
					"name": "Forget Other User's Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"{{jobId_other}}"
							]
						},
						"description": "Remove the other user's job from the primary user's list of visible jobs."
					},
					"response": []
				},
				{
					"name": "Verify - Other Job no longer in List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"var found = false;",
									"",
									"if (testLevels(tests, data, 'jobs.features', 'array')) {",
									"    for (i = 0; i < data.jobs.features.length; i++) {",
									"        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {",
									"            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Job not available in list\"] = !found;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Check that another user's job was removed from the job list after the primary user forgot it."
					},
					"response": []
				},
				{
					"name": "HTTP Base",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"tests[\"HTTPS needed\"] = responseBody.match(/https/i);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://bf-api.{{domain}}",
							"protocol": "http",
							"host": [
								"bf-api",
								"{{domain}}"
							]
						},
						"description": "Check that HTTPS is required at the base endpoint."
					},
					"response": []
				},
				{
					"name": "HTTP Algorithm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"tests[\"HTTPS needed\"] = responseBody.match(/https/i);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://bf-api.{{domain}}/v0/algorithm",
							"protocol": "http",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm"
							]
						},
						"description": "Check that HTTPS is required at the /v0/algorithm endpoint."
					},
					"response": []
				},
				{
					"name": "HTTP User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"tests[\"HTTPS needed\"] = responseBody.match(/https/i);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://bf-api.{{domain}}/v0/user",
							"protocol": "http",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"user"
							]
						},
						"description": "Check that HTTPS is required at the /v0/user endpoint."
					},
					"response": []
				},
				{
					"name": "HTTP Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"tests[\"HTTPS needed\"] = responseBody.match(/https/i);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
						},
						"url": {
							"raw": "http://bf-api.{{domain}}/v0/job",
							"protocol": "http",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Check that HTTPS is required at the /v0/job endpoint."
					},
					"response": []
				},
				{
					"name": "HTTP Product Line",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;",
									"tests[\"HTTPS needed\"] = responseBody.match(/https/i);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
						},
						"url": {
							"raw": "http://bf-api.{{domain}}/v0/productline",
							"protocol": "http",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"productline"
							]
						},
						"description": "Check that HTTPS is required at the /v0/productline endpoint."
					},
					"response": []
				},
				{
					"name": "Valid CORS - Beachfront",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "https://beachfront.{{domain}}"
							},
							{
								"key": "Referer",
								"value": "garbage",
								"disabled": true
							},
							{
								"key": "Access-Control-Request-Headers",
								"value": "Content-Type,X-Requested-With"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/algorithm",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm"
							]
						},
						"description": "Check that bf-api accepts a CORS request from beachfront."
					},
					"response": []
				},
				{
					"name": "Valid CORS - BF-Swagger",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "https://bf-swagger.{{domain}}"
							},
							{
								"key": "Referer",
								"value": "garbage",
								"disabled": true
							},
							{
								"key": "Access-Control-Request-Headers",
								"value": "Content-Type,X-Requested-With"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/algorithm",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm"
							]
						},
						"description": "Check that bf-api accepts a CORS request from bf-swagger."
					},
					"response": []
				},
				{
					"name": "Invalid CORS - Just Referer",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Referer",
								"value": "https://beachfront.stage.geointservices.io/v0/user"
							},
							{
								"key": "Access-Control-Request-Headers",
								"value": "Content-Type,X-Requested-With"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/algorithm",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm"
							]
						},
						"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io"
					},
					"response": []
				},
				{
					"name": "Invalid CORS - Garbage",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "https://garbage.{{domain}}"
							},
							{
								"key": "Referer",
								"value": "garbage",
								"disabled": true
							},
							{
								"key": "Access-Control-Request-Headers",
								"value": "Content-Type,X-Requested-With"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/algorithm",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm"
							]
						},
						"description": "Check that bf-api does not accept a CORS request from garbage.geointservices.io."
					},
					"response": []
				},
				{
					"name": "Invalid CORS - Phish",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "http://bf-swagger.{{domain}}.garbage.io"
							},
							{
								"key": "Referer",
								"value": "garbage",
								"disabled": true
							},
							{
								"key": "Access-Control-Request-Headers",
								"value": "Content-Type,X-Requested-With"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/algorithm",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm"
							]
						},
						"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io"
					},
					"response": []
				},
				{
					"name": "Invalid CORS - HTTP BF-Swagger",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 403\"] = responseCode.code === 403;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "http://bf-swagger.{{domain}}"
							},
							{
								"key": "Referer",
								"value": "garbage",
								"disabled": true
							},
							{
								"key": "Access-Control-Request-Headers",
								"value": "Content-Type,X-Requested-With"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/algorithm",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm"
							]
						},
						"description": "Check that bf-api does not accepts a CORS request from http bf-swagger."
					},
					"response": []
				}
			]
		},
		{
			"name": "04_Low",
			"description": "",
			"item": [
				{
					"name": "Get Fake Algorithm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"tests[\"Not found message.\"] = responseBody.match(/no.*found/i);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/algorithm/foo",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"algorithm",
								"foo"
							]
						},
						"description": "Attempt to get the metadata of an algorithm that does not exist."
					},
					"response": []
				},
				{
					"name": "Check Fake Job Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"tests[\"Not found message.\"] = responseBody.match(/no.*found/i);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/foo",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"foo"
							]
						},
						"description": "Check for a 404 response when trying to get the status of a job that does not exist."
					},
					"response": []
				},
				{
					"name": "Forget Fake Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"tests[\"Not found message.\"] = responseBody.match(/no.*found/i);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job/foo",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job",
								"foo"
							]
						},
						"description": "Check for a 404 response when trying to forget a job that does not exist."
					},
					"response": []
				},
				{
					"name": "Create Job - Missing algorithm_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"tests[\"Missing message\"] = responseBody.match(/miss/i);",
									"tests[\"'algorithm_id' mentioned in message\"] = responseBody.match(/algorithm_id/);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Attempt a job without specifying an algorithm_id."
					},
					"response": []
				},
				{
					"name": "Create Job - Missing scene_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"tests[\"Missing message\"] = responseBody.match(/miss/i);",
									"tests[\"'scene_id' mentioned in message\"] = responseBody.match(/scene_id/);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Attempt a job without specifying a scene_id."
					},
					"response": []
				},
				{
					"name": "Create Job - Missing name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"tests[\"Missing message\"] = responseBody.match(/miss/i);",
									"tests[\"'name' mentioned in message\"] = responseBody.match(/name/);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Attempt a job without specifying a name."
					},
					"response": []
				},
				{
					"name": "Create Job - missing planet_api_key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"tests[\"Missing message\"] = responseBody.match(/miss/i);",
									"tests[\"'planet_api_key' mentioned in message\"] = responseBody.match(/planet_api_key/);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{bf_key_1}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
						},
						"url": {
							"raw": "https://bf-api.{{domain}}/v0/job",
							"protocol": "https",
							"host": [
								"bf-api",
								"{{domain}}"
							],
							"path": [
								"v0",
								"job"
							]
						},
						"description": "Attempt a job without providing a Planet Labs Key."
					},
					"response": []
				}
			]
		}
	]
}
