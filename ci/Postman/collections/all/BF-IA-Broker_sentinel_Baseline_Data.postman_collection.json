{
	"id": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
	"name": "BF-IA-Broker_sentinel",
	"description": "",
	"order": [],
	"folders": [
		{
			"description": "",
			"folder": null,
			"folders_order": [],
			"id": "04cd5fff-2b5d-7fb7-d3e5-00f05f4b3978",
			"lastRevision": 2228206228,
			"lastUpdatedBy": "1764447",
			"name": "01_Startup",
			"order": [
				"36d1bfad-4588-a9e5-2562-21a849c88577"
			],
			"owner": "1764447"
		},
		{
			"description": "",
			"folder": null,
			"folders_order": [],
			"id": "bce3d8e6-73ef-393d-af78-4b106c024167",
			"lastRevision": 2228206229,
			"lastUpdatedBy": "1764447",
			"name": "02_High",
			"order": [
				"f443debe-2cc5-d60b-0e07-06a6f455227c",
				"777a162d-a7da-ead5-397b-f60087e799b8",
				"bd83f2c8-bfd2-2ee1-2cae-5363ea581bee",
				"4c0cc9b7-1548-310c-e011-7b9a517a7559"
			],
			"owner": "1764447"
		},
		{
			"description": "",
			"folder": null,
			"folders_order": [],
			"id": "6503e8c6-34b8-d742-2c95-67526e9dcb8f",
			"lastRevision": 2228206230,
			"lastUpdatedBy": "1764447",
			"name": "03_Medium",
			"order": [
				"3dd625c0-1d54-d2af-e074-19615d1c8f05",
				"32650e4e-5123-97bc-341a-5e8c40974632",
				"333ade74-d08b-33e1-35fb-bd523e249a3e",
				"afdf935f-e817-7e87-c57f-69a44fb31be5",
				"008ceb33-7161-52ae-0ac0-a9a49c428261",
				"bd9b2a2b-991e-53f3-fd1c-7a62fb9ef019"
			],
			"owner": "1764447"
		},
		{
			"description": "",
			"folder": null,
			"folders_order": [],
			"id": "44c1270b-617b-ba10-1fc0-140cace50543",
			"lastRevision": 2228206231,
			"lastUpdatedBy": "1764447",
			"name": "04_Low",
			"order": [
				"be3f202e-7b94-170d-9f2a-94a09dc9e608",
				"91d3cfdd-42b4-d39e-98fb-2f190e128448",
				"4456281a-120e-84f6-201a-19bcf56f0a28",
				"dc301a26-72c7-8d42-91a5-ada96df43caf",
				"0e217cb7-9ddb-0dc0-f7ac-6f8df7c9a002",
				"0a2e3ef0-8949-f3cc-0d95-750c7cf0edf3",
				"d7579e56-c34e-08d0-8be9-1aa32ccd20e7",
				"fe868217-9e10-6713-f24c-6facb0974b5d",
				"daf0fd06-6aca-91f0-a5cd-74aeada5d060",
				"a1a85676-1bf1-daa5-0fef-e7f717535a5d"
			],
			"owner": "1764447"
		}
	],
	"folders_order": [
		"04cd5fff-2b5d-7fb7-d3e5-00f05f4b3978",
		"bce3d8e6-73ef-393d-af78-4b106c024167",
		"6503e8c6-34b8-d742-2c95-67526e9dcb8f",
		"44c1270b-617b-ba10-1fc0-140cace50543"
	],
	"timestamp": 0,
	"owner": "1764447",
	"public": false,
	"requests": [
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for sentinel images, using \"acquiredDate\" & \"maxAcquiredDate\" as the query parameters.",
			"descriptionFormat": null,
			"folder": "6503e8c6-34b8-d742-2c95-67526e9dcb8f",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "008ceb33-7161-52ae-0ac0-a9a49c428261",
			"method": "GET",
			"name": "Discover Sentinel - Date Range",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo') || data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('twoDaysAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are within the defined date range\"] = match_date;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}&maxAcquiredDate={{twoDaysAgo}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover without supplying a PL key.",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "0a2e3ef0-8949-f3cc-0d95-750c7cf0edf3",
			"method": "GET",
			"name": "Discover - No PL Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem missing planet labs key\"] = responseBody.match(/planet/i) && responseBody.match(/key/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover using an invalid item type.",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "0e217cb7-9ddb-0dc0-f7ac-6f8df7c9a002",
			"method": "GET",
			"name": "Discover - Bad Item Type",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem with item type\"] = responseBody.match(/item.*type/i);\ntests[\"'foo' is in reponse\"] = responseBody.match(/foo/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/foo?PL_API_KEY={{PL API - NO COMMIT}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for sentinel images, using \"cloudCover\" as the only query parameter.",
			"descriptionFormat": null,
			"folder": "6503e8c6-34b8-d742-2c95-67526e9dcb8f",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "32650e4e-5123-97bc-341a-5e8c40974632",
			"method": "GET",
			"name": "Discover Sentinel - cloudCover",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "cloudCover",
					"value": "{{cloudCover}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_cc = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.cloudCover', 'skip', 'features[0].')) {\n            if (data.features[i].properties.cloudCover > parseFloat(postman.getEnvironmentVariable('cloudCover'))) {\n                match_cc = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are below the defined cloud cover\"] = match_cc;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&cloudCover={{cloudCover}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for sentinel images, using \"acquiredDate\" as the only query parameter.",
			"descriptionFormat": null,
			"folder": "6503e8c6-34b8-d742-2c95-67526e9dcb8f",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "333ade74-d08b-33e1-35fb-bd523e249a3e",
			"method": "GET",
			"name": "Discover Sentinel - acquiredDate",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are after the defined acquiredDate\"] = match_date;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Check that the app responds at all.",
			"descriptionFormat": null,
			"folder": "04cd5fff-2b5d-7fb7-d3e5-00f05f4b3978",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"headers": "Content-Type: application/json\n",
			"helperAttributes": "{}",
			"id": "36d1bfad-4588-a9e5-2562-21a849c88577",
			"method": "GET",
			"name": "Health Check",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": "",
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-2);\npostman.setEnvironmentVariable('twoDaysAgo', d.toISOString());\nd.setMonth(d.getMonth()-5);\npostman.setEnvironmentVariable('fiveMonthsAgo', d.toISOString());\npostman.setEnvironmentVariable('retry_loop', \"0\");\npostman.setEnvironmentVariable('max_retries', 25);\npostman.setEnvironmentVariable('bbox', '9,46,17,50');\npostman.setEnvironmentVariable('cloudCover', '0.75');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"url": "https://bf-ia-broker.{{domain}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for sentinel images, using \"bbox\" as the only query parameter.",
			"descriptionFormat": null,
			"folder": "6503e8c6-34b8-d742-2c95-67526e9dcb8f",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "3dd625c0-1d54-d2af-e074-19615d1c8f05",
			"method": "GET",
			"name": "Discover Sentinel - bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "{{bbox}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_bb = true;\n\nfunction checkIntersection(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nsrcBB = postman.getEnvironmentVariable('bbox').split(',').map(Number);\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'bbox', 'skip', 'features[0].')) {\n            imgBB = data.features[i].bbox;\n            if (!checkIntersection(imgBB, srcBB)) {\n                match_bb = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images intersect the defined bounding box\"] = match_bb;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&bbox={{bbox}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover sentinel images using an out-of-bounds bbox",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "4456281a-120e-84f6-201a-19bcf56f0a28",
			"method": "GET",
			"name": "Discover - Out-of-Bounds bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "185,195,200,365"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&bbox=185,195,200,365"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Get the metadata of a single sentinel image, including the tideprediction results in the metadata.",
			"descriptionFormat": null,
			"folder": "bce3d8e6-73ef-393d-af78-4b106c024167",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "4c0cc9b7-1548-310c-e011-7b9a517a7559",
			"method": "GET",
			"name": "Get Sentinel with tides",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "tides",
					"value": "true"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('sentinelId') == data.id;\n}\nif (testLevels(tests, data, 'properties.CurrentTide')) {\n    tests[\"CurrentTide is correct\"] = data.properties.CurrentTide <= 1.1*parseFloat(postman.getEnvironmentVariable('currentTide')) && data.properties.CurrentTide >= 0.9*parseFloat(postman.getEnvironmentVariable('currentTide'));\n}\nif (testLevels(tests, data, 'properties.MaximumTide24Hours')) {\n    tests[\"MaximumTide24Hours is correct\"] = data.properties.MaximumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours')) && data.properties.MaximumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours'));\n}\nif (testLevels(tests, data, 'properties.MinimumTide24Hours')) {\n    tests[\"MinimumTide24Hours is correct\"] = data.properties.MinimumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours')) && data.properties.MinimumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours'));\n}",
			"url": "https://bf-ia-broker.{{domain}}/planet/sentinel/{{sentinelId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=true"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Get the metadata of a single sentinel image.",
			"descriptionFormat": null,
			"folder": "bce3d8e6-73ef-393d-af78-4b106c024167",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "777a162d-a7da-ead5-397b-f60087e799b8",
			"method": "GET",
			"name": "Get Sentinel",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "tides",
					"value": "false"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar noTest = {};\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('sentinelId') == data.id;\n}\nif (testLevels(tests, data, 'bbox', 'array')) {\n    tests[\"Full bounding box available\"] = data.bbox.length == 4;\n    postman.setEnvironmentVariable('lon', (data.bbox[0] + data.bbox[2])/2);\n    postman.setEnvironmentVariable('lat', (data.bbox[1] + data.bbox[3])/2);\n}\nif (testLevels(tests, data, 'properties.acquiredDate')) {\n    var d = new Date(data.properties.acquiredDate);\n    var datestring = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + '-' + d.getUTCHours() + '-' + d.getMinutes();\n    postman.setEnvironmentVariable('acquiredDate', datestring);\n}\n\ntests[\"Tides should not be included in the result\"] = !testLevels(noTest, data, 'properties.CurrentTide') && !testLevels(noTest, data, 'properties.MaximumTide24Hours') && !testLevels(noTest, data, 'properties.MinimumTide24Hours');",
			"url": "https://bf-ia-broker.{{domain}}/planet/sentinel/{{sentinelId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=false"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover sentinel images using an invalid bbox",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "91d3cfdd-42b4-d39e-98fb-2f190e128448",
			"method": "GET",
			"name": "Discover - Invalid bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "foo"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'bbox'\"] = responseBody.match(/bbox/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&bbox=foo"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to get the metadata of a single sentinel image while using an invalid PL Key",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "a1a85676-1bf1-daa5-0fef-e7f717535a5d",
			"method": "GET",
			"name": "Get Metadata - Bad PL Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "foo"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"url": "https://bf-ia-broker.{{domain}}/planet/sentinel/{{sentinelId}}?PL_API_KEY=foo"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for sentinel images, using \"maxAcquiredDate\" as the only query parameter.",
			"descriptionFormat": null,
			"folder": "6503e8c6-34b8-d742-2c95-67526e9dcb8f",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "afdf935f-e817-7e87-c57f-69a44fb31be5",
			"method": "GET",
			"name": "Discover Sentinel - maxAcquiredDate",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{fiveMonthsAgo}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('fiveMonthsAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are before the defined acquiredDate\"] = match_date;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{fiveMonthsAgo}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Get the tide at a given point and time.",
			"descriptionFormat": null,
			"folder": "bce3d8e6-73ef-393d-af78-4b106c024167",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"headers": "Content-Type: application/json\n",
			"helperAttributes": "{}",
			"id": "bd83f2c8-bfd2-2ee1-2cae-5363ea581bee",
			"method": "POST",
			"name": "Get Tides Directly",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": "{\n  \"lat\": {{lat}},\n  \"lon\": {{lon}},\n  \"dtg\": \"{{acquiredDate}}\"\n}",
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'currentTide', 'number')) {\n    postman.setEnvironmentVariable('currentTide', data.currentTide);\n}\nif (testLevels(tests, data, 'maximumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('maximumTide24Hours', data.maximumTide24Hours);\n}\nif (testLevels(tests, data, 'minimumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('minimumTide24Hours', data.minimumTide24Hours);\n}",
			"url": "https://bf-tideprediction.{{domain}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for sentinel images, using \"bbox\", \"cloudCover\", \"acquiredDate\", & \"maxAcquiredDate\" as the query parameters.",
			"descriptionFormat": null,
			"folder": "6503e8c6-34b8-d742-2c95-67526e9dcb8f",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "bd9b2a2b-991e-53f3-fd1c-7a62fb9ef019",
			"method": "GET",
			"name": "Discover Sentinel - dates, cc, & bb",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "{{bbox}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "cloudCover",
					"value": "{{cloudCover}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\nvar match_bb = true;\nvar match_cc = true;\n\nfunction checkIntersection(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nsrcBB = postman.getEnvironmentVariable('bbox').split(',').map(Number);\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo') || data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('twoDaysAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n        if (testLevels(tests, data.features[i], 'bbox', 'skip', 'features[0].')) {\n            imgBB = data.features[i].bbox;\n            if (!checkIntersection(imgBB, srcBB)) {\n                match_bb = false;\n                console.log(data.features[i].id);\n            }\n        }\n        if (testLevels(tests, data.features[i], 'properties.cloudCover', 'skip', 'features[0].')) {\n            if (data.features[i].properties.cloudCover > parseFloat(postman.getEnvironmentVariable('cloudCover'))) {\n                match_cc = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are after the defined acquiredDate\"] = match_date;\ntests[\"All returned images intersect the defined bounding box\"] = match_bb;\ntests[\"All returned images are below the defined cloud cover\"] = match_cc;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}&maxAcquiredDate={{twoDaysAgo}}&bbox={{bbox}}&cloudCover={{cloudCover}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover sentinel images using a reversed bbox",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "be3f202e-7b94-170d-9f2a-94a09dc9e608",
			"method": "GET",
			"name": "Discover - Reversed bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "17,9,16,8"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'bbox'\"] = responseBody.match(/bbox/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&bbox=17,9,16,8"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "d7579e56-c34e-08d0-8be9-1aa32ccd20e7",
			"method": "GET",
			"name": "Discover - Bad PL Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye?PL_API_KEY=foo"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to retrieve the metadata of a scene that does not exist.",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "daf0fd06-6aca-91f0-a5cd-74aeada5d060",
			"method": "GET",
			"name": "Get Metadata - Invalid Id",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 404 (Bug #15689)\"] = responseCode.code === 404;\ntests[\"'Not Found' message\"] = responseBody.match(/no/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/sentinel/foo?PL_API_KEY={{PL API - NO COMMIT}}"
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover sentinel images using a string cloudCover.",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "dc301a26-72c7-8d42-91a5-ada96df43caf",
			"method": "GET",
			"name": "Discover - Invalid cloudCover",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "cloudCover",
					"value": "foo"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'cloudCover'\"] = responseBody.match(/cloud.*cover/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&cloudCover=foo"
		},
		{
			"id": "f443debe-2cc5-d60b-0e07-06a6f455227c",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{twoDaysAgo}}",
			"folder": "bce3d8e6-73ef-393d-af78-4b106c024167",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nvar results = '';\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'id', 'skip', 'features[0].')) {\n            results = data.features[i].id + ',' + results;\n        }\n    }\n}\ntests[\"All returned images are sentinel\"] = match;\npostman.setEnvironmentVariable('sentinelId', 'S2A_MSIL1C_20170918T070231_N0205_R120_T39LTF_20170918T070230');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1508168975623,
			"name": "Discover Sentinel",
			"description": "Query the catalog for sentinel images.",
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"responses": []
		},
		{
			"collectionId": "5bfe8d41-6547-52f4-f279-6c6c727f371f",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"descriptionFormat": null,
			"folder": "44c1270b-617b-ba10-1fc0-140cace50543",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "fe868217-9e10-6713-f24c-6facb0974b5d",
			"isLastRequest": true,
			"method": "POST",
			"name": "Activate - Bad PL Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"url": "https://bf-ia-broker.{{domain}}/planet/activate/rapideye/20170310_023105_5125803_RapidEye-3?PL_API_KEY=foo"
		}
	]
}