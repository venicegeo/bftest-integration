{
	"id": "64480ac4-6fe3-1699-1172-958f16b68420",
	"name": "BF_API",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "8c440257-d1f0-1ed5-d37e-30cf5f67d6d1",
			"name": "01_Startup",
			"description": "",
			"order": [
				"62e5db49-d30d-322f-d522-a428f4502dc6",
				"ac5ad91e-2aa7-0329-354d-9d659379c540",
				"b4bfa388-3875-0151-0cc4-e9bf4eaf2811",
				"e2685fc8-77e5-babe-ff1b-76289b7c6a1f",
				"71606d3e-2707-68fc-b845-08a18455f557",
				"ae5528f7-50a8-8867-9cae-e765d35c4dbe",
				"a3359f02-5f16-9470-9717-e31cfe48df38",
				"3d299624-8b5a-e8a5-22b6-eeae99683397"
			],
			"owner": "699425"
		},
		{
			"id": "a3cbfb34-5f4a-77d3-a7af-e7c3c844d394",
			"name": "02_High",
			"description": "",
			"order": [
				"e3e50bd8-eba1-4f3f-4c49-4d2fdc2f30af",
				"71728f0d-535f-87bb-d9bb-b549fb0f3f21",
				"714dfaef-ec7b-c196-9578-9e005ce4a27a",
				"1f4360e3-bea4-da3c-8133-c11503bff374"
			],
			"owner": "699425"
		},
		{
			"id": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"name": "03_Medium",
			"description": "",
			"order": [
				"73f74336-ac16-8c05-c684-9c13dfeb8187",
				"72d2d59f-6b6c-b82f-fc90-2cc256b2a3dd",
				"f376964a-0e39-2ce3-56e1-e0206c928201",
				"c6a18fb4-a801-78d0-d96e-167dab2526e2",
				"6dc15921-1892-bbfc-36f6-8718532298e8",
				"f5164622-b1f1-d9ac-5486-5f848623e77a",
				"ae050b93-1cae-7503-a19b-8b762b61f787",
				"7d6640a9-0ad4-b759-28df-93bb365d9d7d",
				"affc727f-b104-2d34-3488-5a2dd893c1e8",
				"e1ddcdf2-89f9-6443-ad36-b6779d7f7afb",
				"dee721bd-788d-248f-7ac6-abb2c662e4fb",
				"3aa682a3-50d6-e2fc-2149-6e353af1ff46",
				"ff2d0bec-b972-4888-0b81-498c8c01f286",
				"dee46bad-1c97-5737-2622-30c10319fbeb",
				"81913220-6678-7bb3-802e-bbb0fd844166",
				"f12b0128-7958-d252-c43e-3fef49e24903",
				"668083e7-bd36-eca5-f980-36366e292e4f",
				"95b19647-35ef-e9b6-7663-3363fde45aea",
				"26fa98e1-6a19-6717-65dd-d0147198a9c7",
				"27a9ee67-7a38-668c-d1ed-16b6dd765f8d",
				"5aa17596-3ae8-e873-dc32-bbe5fc31cbfa",
				"0e7b2cbf-86b9-31fb-e394-33afb76eea54",
				"dde02d2c-f360-3e12-08ff-140a3a47f2ad",
				"2ad120b0-e455-4c78-14ce-7cda1e6ffdd4"
			],
			"owner": "699425"
		},
		{
			"id": "e0209d21-842b-4608-ed27-da1b9f1beea3",
			"name": "04_Low",
			"description": "",
			"order": [
				"fcce742d-4a8b-4e45-c989-cd81204310df",
				"ae040b12-5103-2d42-3e43-d8bd1ad4ae28",
				"a1341f16-7c1a-9447-9faa-3631dd5e4440",
				"5ddf7b8c-f966-1fce-7efd-a04e5cc74344",
				"99a6520e-8253-73c6-a7f8-5c4e1a93815c",
				"b7b8d760-f2c3-fb6d-0266-4dcd85ded83d",
				"53954910-59c2-e21d-cd0a-f484e8291bf9"
			],
			"owner": "699425"
		}
	],
	"timestamp": 0,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"id": "0e7b2cbf-86b9-31fb-e394-33afb76eea54",
			"headers": "Origin: https://garbage.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570153759,
			"name": "Invalid CORS - Garbage",
			"description": "Check that bf-api does not accept a CORS request from garbage.geointservices.io.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "1f4360e3-bea4-da3c-8133-c11503bff374",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/rapideye:{{rapideyeId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === ('rapideye:' + postman.getEnvironmentVariable('rapideyeId'));\n        }\n    }\n    postman.setEnvironmentVariable('active jobs - scene', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570091487,
			"name": "List Jobs by Scene",
			"description": "List all jobs filtered by scene ID, making sure the just created job is present.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "a3cbfb34-5f4a-77d3-a7af-e7c3c844d394",
			"rawModeData": ""
		},
		{
			"id": "26fa98e1-6a19-6717-65dd-d0147198a9c7",
			"headers": "Origin: https://beachfront.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570151182,
			"name": "Valid CORS - Beachfront",
			"description": "Check that bf-api accepts a CORS request from beachfront.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "27a9ee67-7a38-668c-d1ed-16b6dd765f8d",
			"headers": "Origin: https://bf-swagger.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570152046,
			"name": "Valid CORS - BF-Swagger",
			"description": "Check that bf-api accepts a CORS request from bf-swagger.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "2ad120b0-e455-4c78-14ce-7cda1e6ffdd4",
			"headers": "Origin: http://bf-swagger.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570155798,
			"name": "Invalid CORS - HTTP BF-Swagger",
			"description": "Check that bf-api does not accepts a CORS request from http bf-swagger.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "3aa682a3-50d6-e2fc-2149-6e353af1ff46",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570129911,
			"name": "Forget Other User's Job",
			"description": "Remove the other user's job from the primary user's list of visible jobs.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "3d299624-8b5a-e8a5-22b6-eeae99683397",
			"headers": "",
			"url": "{{catalog_url}}/planet/rapideye/{{rapideyeId}}?PL_API_KEY={{PL API - NO COMMIT}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar noTest = {};\n\nif (testLevels(noTest, data, 'properties.status') && testLevels(noTest, data, 'properties.permissions', 'array') && _.includes(data.properties.permissions,'download') && data.properties.status === \"inactive\") {\n    // Multiple conditions combined in INT test, so it is not a failure if the field is missing for one image.\n    // Continue if scene is downloadable & inactive.\n    postman.setEnvironmentVariable('retry_loop', \"0\");\n    tests[\"Activatable image found.\"] = true;\n} else {\n    // Repeat with next image in list\n    var results = postman.getEnvironmentVariable('rapideyeImages');\n    postman.setEnvironmentVariable('rapideyeId', results.split(',')[0]);\n    postman.setEnvironmentVariable('rapideyeImages', results.replace(/[^,]*,/,''));\n    if (postman.getEnvironmentVariable('rapideyeId') === '') {\n        postman.setNextRequest('Discover Planetscope');\n        tests[\"Activatable image found.\"] = false;\n    } else {\n        postman.setNextRequest('Check if Rapideye Inactive');\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1487189217439,
			"name": "Check if Rapideye Inactive",
			"description": "Get the metadata of a single rapideye image.  Repeat this with a new image until an inactive image found.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"folder": "8c440257-d1f0-1ed5-d37e-30cf5f67d6d1"
		},
		{
			"id": "53954910-59c2-e21d-cd0a-f484e8291bf9",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'planet_api_key' mentioned in message\"] = responseBody.match(/planet_api_key/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570137917,
			"name": "Create Job - missing planet_api_key",
			"description": "Attempt a job without providing a Planet Labs Key.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "e0209d21-842b-4608-ed27-da1b9f1beea3",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "5aa17596-3ae8-e873-dc32-bbe5fc31cbfa",
			"headers": "Referer: https://beachfront.stage.geointservices.io/v0/user\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570152928,
			"name": "Invalid CORS - Just Referer",
			"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "5ddf7b8c-f966-1fce-7efd-a04e5cc74344",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'algorithm_id' mentioned in message\"] = responseBody.match(/algorithm_id/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570134854,
			"name": "Create Job - Missing algorithm_id",
			"description": "Attempt a job without specifying an algorithm_id.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "e0209d21-842b-4608-ed27-da1b9f1beea3",
			"rawModeData": "{\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"id": "62e5db49-d30d-322f-d522-a428f4502dc6",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-2);\nd_string = d.toISOString();\npostman.setEnvironmentVariable('TwoDaysAgo', d.toISOString());\n\npostman.setEnvironmentVariable('retry_loop', '0');\npostman.setEnvironmentVariable('max_retries', 20);\npostman.setEnvironmentVariable('PL Name', 'IntegrationTest_SriLanka');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1487358929552,
			"name": "Health Check",
			"description": "Check that the app responds at all.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"rawModeData": ""
		},
		{
			"id": "668083e7-bd36-eca5-f980-36366e292e4f",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570147710,
			"name": "HTTP Job",
			"description": "Check that HTTPS is required at the /v0/job endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"id": "6dc15921-1892-bbfc-36f6-8718532298e8",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n}\n\ntests[\"Job found in list of jobs\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570123911,
			"name": "Remembered Job in List",
			"description": "List all jobs filtered by scene ID, making sure the remembered rob has returned.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "714dfaef-ec7b-c196-9578-9e005ce4a27a",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n    postman.setEnvironmentVariable('active jobs', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570085774,
			"name": "List Jobs",
			"description": "List all jobs the user can see, making sure the just created job is present.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "a3cbfb34-5f4a-77d3-a7af-e7c3c844d394",
			"rawModeData": ""
		},
		{
			"id": "71606d3e-2707-68fc-b845-08a18455f557",
			"headers": "",
			"url": "{{catalog_url}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1486570027024,
			"name": "Validate Catalog URL",
			"description": "Validate that the url given for the catalog service is valid",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "8c440257-d1f0-1ed5-d37e-30cf5f67d6d1"
		},
		{
			"id": "71728f0d-535f-87bb-d9bb-b549fb0f3f21",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'job.properties.status')) {\n    if (data.job.properties.status === 'Running' || data.job.properties.status === 'Submitted' || data.job.properties.status === 'Pending') {\n        if (parseInt(postman.getEnvironmentVariable('retry_loop')) < parseInt(postman.getEnvironmentVariable('max_retries'))) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Job Status');\n            wait(30000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            tests[\"status is still \" + data.job.properties.status] = false;\n            postman.setEnvironmentVariable('retry_loop','0');\n        }\n    }\n    else if (data.job.properties.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop','0');\n        tests[\"Job finished in time\"] = true;\n    }\n    else {\n        tests[\"status should not be \" + data.job.properties.status] = false;\n        postman.setEnvironmentVariable('retry_loop','0');\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1487359062744,
			"name": "Check Job Status",
			"description": "Check that the shoreline calculation job was successful.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420"
		},
		{
			"id": "72d2d59f-6b6c-b82f-fc90-2cc256b2a3dd",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n}\nif (parseInt(postman.getEnvironmentVariable('active jobs')) == 1) {\n    // If there was only one job before it was deleted, \n    // don't fail for a test that an array is returned.\n    delete tests[\"features is array\"];\n}\n\ntests[\"Job not available in list\"] = !found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570120490,
			"name": "Verify Forgotten - List",
			"description": "Check that a forgotten job is not available in the job list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "73f74336-ac16-8c05-c684-9c13dfeb8187",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId'));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570117202,
			"name": "Forget Job",
			"description": "Remove a job from the user's list of visible jobs,",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "7d6640a9-0ad4-b759-28df-93bb365d9d7d",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570126901,
			"name": "Check Other User's Job",
			"description": "Check the job status of another user's job, for the purpose of adding it to the job list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b"
		},
		{
			"id": "81913220-6678-7bb3-802e-bbb0fd844166",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570145790,
			"name": "HTTP Algorithm",
			"description": "Check that HTTPS is required at the /v0/algorithm endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "95b19647-35ef-e9b6-7663-3363fde45aea",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}/v0/productline",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570148632,
			"name": "HTTP Product Line",
			"description": "Check that HTTPS is required at the /v0/productline endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"id": "99a6520e-8253-73c6-a7f8-5c4e1a93815c",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'scene_id' mentioned in message\"] = responseBody.match(/scene_id/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570135632,
			"name": "Create Job - Missing scene_id",
			"description": "Attempt a job without specifying a scene_id.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "e0209d21-842b-4608-ed27-da1b9f1beea3",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"id": "a1341f16-7c1a-9447-9faa-3631dd5e4440",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/foo",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570134038,
			"name": "Forget Fake Job",
			"description": "Check for a 404 response when trying to forget a job that does not exist.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "e0209d21-842b-4608-ed27-da1b9f1beea3"
		},
		{
			"id": "a3359f02-5f16-9470-9717-e31cfe48df38",
			"headers": "",
			"url": "{{catalog_url}}/planet/discover/rapideye?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{TwoDaysAgo}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nvar results = '';\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/rapideye/i);\n        }\n        if (testLevels(tests, data.features[i], 'id', 'skip', 'features[0].')) {\n            results = data.features[i].id + ',' + results;\n        }\n    }\n}\ntests[\"All returned images are rapideye\"] = match;\npostman.setEnvironmentVariable('rapideyeId', results.split(',')[0]);\npostman.setEnvironmentVariable('rapideyeImages', results.replace(/[^,]*,/,''));",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1487189089122,
			"name": "Get Rapideye List",
			"description": "Query the catalog for rapideye images.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"responses": [],
			"folder": "8c440257-d1f0-1ed5-d37e-30cf5f67d6d1"
		},
		{
			"id": "ac5ad91e-2aa7-0329-354d-9d659379c540",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'algorithms', 'array')) {\n    for (i = 0; i < data.algorithms.length; i++) {\n        testLevels(tests, data.algorithms[i], 'description', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'interface', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'max_cloud_cover', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'name', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'service_id', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'version', 'skip', 'algorithms[].');\n    }\n    if (testLevels(tests, data.algorithms[0], 'service_id', 'skip', 'algorithms[].')) {\n        postman.setEnvironmentVariable('algServiceId', data.algorithms[0].service_id);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486569677587,
			"name": "List Algorithms",
			"description": "List the algoithms in use by BF.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "8c440257-d1f0-1ed5-d37e-30cf5f67d6d1",
			"rawModeData": ""
		},
		{
			"id": "ae040b12-5103-2d42-3e43-d8bd1ad4ae28",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/foo",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570131518,
			"name": "Check Fake Job Status",
			"description": "Check for a 404 response when trying to get the status of a job that does not exist.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "e0209d21-842b-4608-ed27-da1b9f1beea3"
		},
		{
			"id": "ae050b93-1cae-7503-a19b-8b762b61f787",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job not available in list\"] = !found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570125992,
			"name": "Verify - Other Job not in  List",
			"description": "Check that another user's job was not in the job list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "ae5528f7-50a8-8867-9cae-e765d35c4dbe",
			"headers": "",
			"url": "{{wms_server_url}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1486570029778,
			"name": "Validate WMS URL",
			"description": "Validate that the url given for the WMS service is valid.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "8c440257-d1f0-1ed5-d37e-30cf5f67d6d1"
		},
		{
			"id": "affc727f-b104-2d34-3488-5a2dd893c1e8",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job available in list\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570127664,
			"name": "Verify - Other Job added to List",
			"description": "Check that another user's job was added to the job list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "b4bfa388-3875-0151-0cc4-e9bf4eaf2811",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm/{{algServiceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntestLevels(tests, data, 'algorithm.description');\ntestLevels(tests, data, 'algorithm.interface');\ntestLevels(tests, data, 'algorithm.max_cloud_cover');\ntestLevels(tests, data, 'algorithm.name');\nif (testLevels(tests, data.algorithm, 'service_id')) {\n    tests[\"Correct service_id returned\"] = postman.getEnvironmentVariable('algServiceId') === data.algorithm.service_id;\n}\ntestLevels(tests, data, 'algorithm.version');",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486569670819,
			"name": "Get Algorithm",
			"description": "Get the metadata of a specific algorithm.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "8c440257-d1f0-1ed5-d37e-30cf5f67d6d1",
			"rawModeData": ""
		},
		{
			"id": "b7b8d760-f2c3-fb6d-0266-4dcd85ded83d",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'name' mentioned in message\"] = responseBody.match(/name/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570136574,
			"name": "Create Job - Missing name",
			"description": "Attempt a job without specifying a name.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "e0209d21-842b-4608-ed27-da1b9f1beea3",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"id": "c6a18fb4-a801-78d0-d96e-167dab2526e2",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570123015,
			"name": "Remember Job",
			"description": "Check the job status of a forgotten job, for the purpose of returning it to the job list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b"
		},
		{
			"id": "dde02d2c-f360-3e12-08ff-140a3a47f2ad",
			"headers": "Origin: http://bf-swagger.{{domain}}.garbage.io\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570154845,
			"name": "Invalid CORS - Phish",
			"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "dee46bad-1c97-5737-2622-30c10319fbeb",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1486570144790,
			"name": "HTTP Base",
			"description": "Check that HTTPS is required at the base endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "dee721bd-788d-248f-7ac6-abb2c662e4fb",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job available in list\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570129150,
			"name": "Verify - Other Job Still in List",
			"description": "Check that another user's job remained in the job list even after that other user forgot that job.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "e1ddcdf2-89f9-6443-ad36-b6779d7f7afb",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId_other}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Correct job forgotten\"] = responseBody.match(postman.getEnvironmentVariable('jobId_other'));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_2}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570128422,
			"name": "Have Other User Forget Job",
			"description": "Remove a job from the other user's list of visible jobs.\nThis should not remove the job from the primary user's list.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "e2685fc8-77e5-babe-ff1b-76289b7c6a1f",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/user",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'services.catalog')) {\n    postman.setEnvironmentVariable('catalog_url', data.services.catalog);\n}\nif (testLevels(tests, data, 'services.wms_server')) {\n    postman.setEnvironmentVariable('wms_server_url', data.services.wms_server.replace('https', 'http'));\n}\nif (testLevels(tests, data, 'profile.username')) {\n    tests[\"Correct username returned\"] = data.profile.username === postman.getEnvironmentVariable('bf_user_1');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570023733,
			"name": "Get Services",
			"description": "Get a list of services in use by BF.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "8c440257-d1f0-1ed5-d37e-30cf5f67d6d1",
			"rawModeData": ""
		},
		{
			"id": "e3e50bd8-eba1-4f3f-4c49-4d2fdc2f30af",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'job.id')) {\n    postman.setEnvironmentVariable('jobId', data.job.id);\n}\ntestLevels(tests, data, 'job.geometry');\nif (testLevels(tests, data, 'job.properties.created_by')) {\n    tests[\"Correct User\"] = postman.getEnvironmentVariable('bf_user_1') === data.job.properties.created_by;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570083474,
			"name": "Create Job",
			"description": "Start a shoreline calculation job.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "a3cbfb34-5f4a-77d3-a7af-e7c3c844d394",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"rapideye:{{rapideyeId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"id": "f12b0128-7958-d252-c43e-3fef49e24903",
			"headers": "Content-Type: application/json\n",
			"url": "http://bf-api.{{domain}}/v0/user",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570146725,
			"name": "HTTP User",
			"description": "Check that HTTPS is required at the /v0/user endpoint.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "f376964a-0e39-2ce3-56e1-e0206c928201",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/rapideye:{{rapideyeId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === ('rapideye:' + postman.getEnvironmentVariable('rapideyeId'));\n        }\n    }\n}\nif (parseInt(postman.getEnvironmentVariable('active jobs - scene')) == 1) {\n    // If there was only one job before it was deleted, \n    // don't fail for a test that an array is returned.\n    delete tests[\"features is array\"];\n}\n\ntests[\"Forgotten Job still available in list by_scene\"] = found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570122127,
			"name": "Verify Forgotten - List Jobs by Scene",
			"description": "Check that a forgotten job is not available in the jobs listed by scene.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		},
		{
			"id": "f5164622-b1f1-d9ac-5486-5f848623e77a",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'job.id')) {\n    postman.setEnvironmentVariable('jobId_other', data.job.id);\n}\ntestLevels(tests, data, 'job.geometry');\nif (testLevels(tests, data, 'job.properties.created_by')) {\n    tests[\"Created by not the main user\"] = postman.getEnvironmentVariable('bf_user_2') === data.job.properties.created_by;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_2}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570124840,
			"name": "Create Job from Another User",
			"description": "Start a shoreline calculation job, under a different user.\nCreating this job serves the purpose of making it visible to the primary user in this test.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"rapideye:{{rapideyeId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"id": "fcce742d-4a8b-4e45-c989-cd81204310df",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm/foo",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570031903,
			"name": "Get Fake Algorithm",
			"description": "Attempt to get the metadata of an algorithm that does not exist.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "e0209d21-842b-4608-ed27-da1b9f1beea3",
			"rawModeData": ""
		},
		{
			"id": "ff2d0bec-b972-4888-0b81-498c8c01f286",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId_other');\n        }\n    }\n}\n\ntests[\"Job not available in list\"] = !found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1486570130662,
			"name": "Verify - Other Job no longer in List",
			"description": "Check that another user's job was removed from the job list after the primary user forgot it.",
			"collectionId": "64480ac4-6fe3-1699-1172-958f16b68420",
			"folder": "be6cf0c1-f7f1-b6a2-ff81-b43fd9895c3b",
			"rawModeData": ""
		}
	]
}