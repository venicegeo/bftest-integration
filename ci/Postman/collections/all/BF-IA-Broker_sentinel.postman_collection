{
	"id": "18c52758-31a5-4915-83e1-b79e242c4730",
	"name": "BF-IA-Broker_sentinel",
	"description": "",
	"order": [],
	"folders": [
		{
			"description": "",
			"folder": null,
			"folders_order": [],
			"id": "548b349d-a194-b0b1-7445-a378f13af2d0",
			"lastRevision": 2228206228,
			"lastUpdatedBy": "1764447",
			"name": "01_Startup",
			"order": [
				"c3977934-8e5f-5721-d8a0-04d76e063922"
			],
			"owner": "835759"
		},
		{
			"description": "",
			"folder": null,
			"folders_order": [],
			"id": "15f9e775-9dcd-9b29-32e4-65f5117bbf44",
			"lastRevision": 2228206229,
			"lastUpdatedBy": "1764447",
			"name": "02_High",
			"order": [
				"825afba0-ca63-b08d-3e0d-58327a662ce4",
				"a928f2b8-6aff-807a-9016-aacee1f735c4",
				"6ebae8aa-9a99-9765-2891-d4ab4c0b8fe9",
				"cdc41497-4a21-36d1-2f42-2db0e1323f57"
			],
			"owner": "835759"
		},
		{
			"description": "",
			"folder": null,
			"folders_order": [],
			"id": "72c7ac2e-86e7-97fd-5bbe-6dc0132f7ea5",
			"lastRevision": 2228206230,
			"lastUpdatedBy": "1764447",
			"name": "03_Medium",
			"order": [
				"8ba090ec-1244-1aa4-aa31-1ce1ae19adfa",
				"addd973e-579e-80e7-53ad-7a4dfbf92da1",
				"aacce72c-4907-f027-e31f-706444e55011",
				"15664abb-82b8-9e75-404b-4854eb7495a1",
				"8b9183c6-4944-0150-da07-3887bfad1ef8",
				"6a4078a4-4671-f588-827f-f811e685ec4a"
			],
			"owner": "835759"
		},
		{
			"description": "",
			"folder": null,
			"folders_order": [],
			"id": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"lastRevision": 2228206231,
			"lastUpdatedBy": "1764447",
			"name": "04_Low",
			"order": [
				"346f569b-8a26-bd7f-d630-36e58901b098",
				"c22c144d-abd9-11c3-d6db-613c1fdecc4d",
				"a82fc8ed-469e-cccc-dd6b-60da7c707c68",
				"2bb73564-a727-3d58-a6ff-542435d16125",
				"00ca8223-1a00-21b8-6024-a1304b753116",
				"cfd174bb-0611-c387-6761-84e4ba66dd0a",
				"485b9355-e5eb-2fe5-96f0-df260d6f2e2e",
				"06daef2d-74c9-08aa-45d3-b8ddbd5aa3ab",
				"5a54018e-3cf6-2e60-ee33-c6b023005ec3",
				"7b0e945a-b79a-2b15-2ee0-8e9e73748c1b"
			],
			"owner": "835759"
		}
	],
	"timestamp": 0,
	"owner": "835759",
	"public": false,
	"requests": [
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover using an invalid item type.",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "00ca8223-1a00-21b8-6024-a1304b753116",
			"method": "GET",
			"name": "Discover - Bad Item Type",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem with item type\"] = responseBody.match(/item.*type/i);\ntests[\"'foo' is in reponse\"] = responseBody.match(/foo/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/foo?PL_API_KEY={{PL API - NO COMMIT}}"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "06daef2d-74c9-08aa-45d3-b8ddbd5aa3ab",
			"isLastRequest": true,
			"method": "POST",
			"name": "Activate - Bad PL Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"url": "https://bf-ia-broker.{{domain}}/planet/activate/rapideye/20170310_023105_5125803_RapidEye-3?PL_API_KEY=foo"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"maxAcquiredDate\" as the only query parameter.",
			"descriptionFormat": null,
			"folder": "72c7ac2e-86e7-97fd-5bbe-6dc0132f7ea5",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "15664abb-82b8-9e75-404b-4854eb7495a1",
			"method": "GET",
			"name": "Discover Sentinel - maxAcquiredDate",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{fiveMonthsAgo}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('fiveMonthsAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are before the defined acquiredDate\"] = match_date;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{fiveMonthsAgo}}"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover landsat images using a string cloudCover.",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "2bb73564-a727-3d58-a6ff-542435d16125",
			"method": "GET",
			"name": "Discover - Invalid cloudCover",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "cloudCover",
					"value": "foo"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'cloudCover'\"] = responseBody.match(/cloud.*cover/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&cloudCover=foo"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover landsat images using a reversed bbox",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "346f569b-8a26-bd7f-d630-36e58901b098",
			"method": "GET",
			"name": "Discover - Reversed bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "17,9,16,8"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'bbox'\"] = responseBody.match(/bbox/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&bbox=17,9,16,8",
			"isFromCollection": true,
			"collectionRequestId": "346f569b-8a26-bd7f-d630-36e58901b098"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover supplying a bad PL key.",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "485b9355-e5eb-2fe5-96f0-df260d6f2e2e",
			"method": "GET",
			"name": "Discover - Bad PL Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye?PL_API_KEY=foo"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to retrieve the metadata of a scene that does not exist.",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "5a54018e-3cf6-2e60-ee33-c6b023005ec3",
			"method": "GET",
			"name": "Get Metadata - Invalid Id",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 404 (Bug #15689)\"] = responseCode.code === 404;\ntests[\"'Not Found' message\"] = responseBody.match(/no/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/sentinel/foo?PL_API_KEY={{PL API - NO COMMIT}}"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"bbox\", \"cloudCover\", \"acquiredDate\", & \"maxAcquiredDate\" as the query parameters.",
			"descriptionFormat": null,
			"folder": "72c7ac2e-86e7-97fd-5bbe-6dc0132f7ea5",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "6a4078a4-4671-f588-827f-f811e685ec4a",
			"method": "GET",
			"name": "Discover Sentinel - dates, cc, & bb",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "{{bbox}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "cloudCover",
					"value": "{{cloudCover}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\nvar match_bb = true;\nvar match_cc = true;\n\nfunction checkIntersection(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nsrcBB = postman.getEnvironmentVariable('bbox').split(',').map(Number);\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo') || data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('twoDaysAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n        if (testLevels(tests, data.features[i], 'bbox', 'skip', 'features[0].')) {\n            imgBB = data.features[i].bbox;\n            if (!checkIntersection(imgBB, srcBB)) {\n                match_bb = false;\n                console.log(data.features[i].id);\n            }\n        }\n        if (testLevels(tests, data.features[i], 'properties.cloudCover', 'skip', 'features[0].')) {\n            if (data.features[i].properties.cloudCover > parseFloat(postman.getEnvironmentVariable('cloudCover'))) {\n                match_cc = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are after the defined acquiredDate\"] = match_date;\ntests[\"All returned images intersect the defined bounding box\"] = match_bb;\ntests[\"All returned images are below the defined cloud cover\"] = match_cc;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}&maxAcquiredDate={{twoDaysAgo}}&bbox={{bbox}}&cloudCover={{cloudCover}}"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Get the tide at a given point and time.",
			"descriptionFormat": null,
			"folder": "15f9e775-9dcd-9b29-32e4-65f5117bbf44",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"headers": "Content-Type: application/json\n",
			"helperAttributes": "{}",
			"id": "6ebae8aa-9a99-9765-2891-d4ab4c0b8fe9",
			"method": "POST",
			"name": "Get Tides Directly",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": "{\n  \"lat\": {{lat}},\n  \"lon\": {{lon}},\n  \"dtg\": \"{{acquiredDate}}\"\n}",
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'currentTide', 'number')) {\n    postman.setEnvironmentVariable('currentTide', data.currentTide);\n}\nif (testLevels(tests, data, 'maximumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('maximumTide24Hours', data.maximumTide24Hours);\n}\nif (testLevels(tests, data, 'minimumTide24Hours', 'number')) {\n    postman.setEnvironmentVariable('minimumTide24Hours', data.minimumTide24Hours);\n}",
			"url": "https://bf-tideprediction.{{domain}}",
			"isFromCollection": true,
			"collectionRequestId": "6ebae8aa-9a99-9765-2891-d4ab4c0b8fe9"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to get the metadata of a single Landsat image while using an invalid PL Key",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "7b0e945a-b79a-2b15-2ee0-8e9e73748c1b",
			"method": "GET",
			"name": "Get Metadata - Bad PL Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "foo"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 401 (Bug #17842)\"] = responseCode.code === 401;",
			"url": "https://bf-ia-broker.{{domain}}/planet/sentinel/{{sentinelId}}?PL_API_KEY=foo"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images.",
			"descriptionFormat": null,
			"folder": "15f9e775-9dcd-9b29-32e4-65f5117bbf44",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "825afba0-ca63-b08d-3e0d-58327a662ce4",
			"method": "GET",
			"name": "Discover Sentinel",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nvar results = '';\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'id', 'skip', 'features[0].')) {\n            results = data.features[i].id + ',' + results;\n        }\n    }\n}\ntests[\"All returned images are landsat\"] = match;\npostman.setEnvironmentVariable('sentinelId', results.split(',')[0]);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{twoDaysAgo}}",
			"isFromCollection": true,
			"collectionRequestId": "825afba0-ca63-b08d-3e0d-58327a662ce4"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"acquiredDate\" & \"maxAcquiredDate\" as the query parameters.",
			"descriptionFormat": null,
			"folder": "72c7ac2e-86e7-97fd-5bbe-6dc0132f7ea5",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "8b9183c6-4944-0150-da07-3887bfad1ef8",
			"method": "GET",
			"name": "Discover Sentinel - Date Range",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "maxAcquiredDate",
					"value": "{{twoDaysAgo}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo') || data.features[i].properties.acquiredDate > postman.getEnvironmentVariable('twoDaysAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are within the defined date range\"] = match_date;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}&maxAcquiredDate={{twoDaysAgo}}"
		},
		{
			"id": "8ba090ec-1244-1aa4-aa31-1ce1ae19adfa",
			"headers": "",
			"headerData": [],
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&bbox={{bbox}}",
			"queryParams": [
				{
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "bbox",
					"value": "{{bbox}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_bb = true;\n\nfunction checkIntersection(imgBB, srcBB, threshold) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n    var latIntersect = (imgBB[0]+threshold >= srcBB[0] && imgBB[0] <= srcBB[2]+threshold) || (srcBB[0]+threshold >= imgBB[0] && srcBB[0] <= imgBB[2]+threshold);\n    var lonIntersect = (imgBB[1]+threshold >= srcBB[1] && imgBB[1] <= srcBB[3]+threshold) || (srcBB[1]+threshold >= imgBB[1] && srcBB[1] <= imgBB[3]+threshold);\n    return latIntersect && lonIntersect;\n}\n\nsrcBB = postman.getEnvironmentVariable('bbox').split(',').map(Number);\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'bbox', 'skip', 'features[0].')) {\n            imgBB = data.features[i].bbox;\n            if (!checkIntersection(imgBB, srcBB, 0.001)) {\n                // 0.001 degree threshold is arbitrary\n                match_bb = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images intersect the defined bounding box\"] = match_bb;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1507663964909,
			"name": "Discover Sentinel - bbox",
			"description": "Query the catalog for Landsat images, using \"bbox\" as the only query parameter.",
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"responses": []
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover landsat images using an out-of-bounds bbox",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "a82fc8ed-469e-cccc-dd6b-60da7c707c68",
			"method": "GET",
			"name": "Discover - Out-of-Bounds bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "185,195,200,365"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&bbox=185,195,200,365",
			"isFromCollection": true,
			"collectionRequestId": "a82fc8ed-469e-cccc-dd6b-60da7c707c68"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Get the metadata of a single Landsat image.",
			"descriptionFormat": null,
			"folder": "15f9e775-9dcd-9b29-32e4-65f5117bbf44",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "a928f2b8-6aff-807a-9016-aacee1f735c4",
			"method": "GET",
			"name": "Get Sentinel",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "tides",
					"value": "false"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar noTest = {};\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('sentinelId') == data.id;\n}\nif (testLevels(tests, data, 'bbox', 'array')) {\n    tests[\"Full bounding box available\"] = data.bbox.length == 4;\n    postman.setEnvironmentVariable('lon', (data.bbox[0] + data.bbox[2])/2);\n    postman.setEnvironmentVariable('lat', (data.bbox[1] + data.bbox[3])/2);\n}\nif (testLevels(tests, data, 'properties.acquiredDate')) {\n    var d = new Date(data.properties.acquiredDate);\n    var datestring = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + '-' + d.getUTCHours() + '-' + d.getMinutes();\n    postman.setEnvironmentVariable('acquiredDate', datestring);\n}\n\ntests[\"Tides should not be included in the result\"] = !testLevels(noTest, data, 'properties.CurrentTide') && !testLevels(noTest, data, 'properties.MaximumTide24Hours') && !testLevels(noTest, data, 'properties.MinimumTide24Hours');",
			"url": "https://bf-ia-broker.{{domain}}/planet/sentinel/{{sentinelId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=false",
			"isFromCollection": true,
			"collectionRequestId": "a928f2b8-6aff-807a-9016-aacee1f735c4"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"acquiredDate\" as the only query parameter.",
			"descriptionFormat": null,
			"folder": "72c7ac2e-86e7-97fd-5bbe-6dc0132f7ea5",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "aacce72c-4907-f027-e31f-706444e55011",
			"method": "GET",
			"name": "Discover Sentinel - acquiredDate",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "acquiredDate",
					"value": "{{fiveMonthsAgo}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_date = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.acquiredDate', 'skip', 'features[0].')) {\n            if (data.features[i].properties.acquiredDate < postman.getEnvironmentVariable('fiveMonthsAgo')) {\n                match_date = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are after the defined acquiredDate\"] = match_date;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&acquiredDate={{fiveMonthsAgo}}"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Query the catalog for Landsat images, using \"cloudCover\" as the only query parameter.",
			"descriptionFormat": null,
			"folder": "72c7ac2e-86e7-97fd-5bbe-6dc0132f7ea5",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "addd973e-579e-80e7-53ad-7a4dfbf92da1",
			"method": "GET",
			"name": "Discover Sentinel - cloudCover",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "cloudCover",
					"value": "{{cloudCover}}"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar match_cc = true;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.sensorName', 'string', 'features[].')) {\n            match = match && data.features[i].properties.sensorName.match(/sentinel/i);\n        }\n        if (testLevels(tests, data.features[i], 'properties.cloudCover', 'skip', 'features[0].')) {\n            if (data.features[i].properties.cloudCover > parseFloat(postman.getEnvironmentVariable('cloudCover'))) {\n                match_cc = false;\n                console.log(data.features[i].id);\n            }\n        }\n    }\n}\n\ntests[\"All returned images are sentinel\"] = match;\ntests[\"All returned images are below the defined cloud cover\"] = match_cc;",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&cloudCover={{cloudCover}}"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover landsat images using an invalid bbox",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "c22c144d-abd9-11c3-d6db-613c1fdecc4d",
			"method": "GET",
			"name": "Discover - Invalid bbox",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "bbox",
					"value": "foo"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\n\ntests[\"Message should mention 'bbox'\"] = responseBody.match(/bbox/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/sentinel?PL_API_KEY={{PL API - NO COMMIT}}&bbox=foo",
			"isFromCollection": true,
			"collectionRequestId": "c22c144d-abd9-11c3-d6db-613c1fdecc4d"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Check that the app responds at all.",
			"descriptionFormat": null,
			"folder": "548b349d-a194-b0b1-7445-a378f13af2d0",
			"headerData": [
				{
					"description": "",
					"enabled": true,
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"headers": "Content-Type: application/json\n",
			"helperAttributes": "{}",
			"id": "c3977934-8e5f-5721-d8a0-04d76e063922",
			"method": "GET",
			"name": "Health Check",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": "",
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-2);\npostman.setEnvironmentVariable('twoDaysAgo', d.toISOString());\nd.setMonth(d.getMonth()-5);\npostman.setEnvironmentVariable('fiveMonthsAgo', d.toISOString());\npostman.setEnvironmentVariable('retry_loop', \"0\");\npostman.setEnvironmentVariable('max_retries', 25);\npostman.setEnvironmentVariable('bbox', '9,46,17,50');\npostman.setEnvironmentVariable('cloudCover', '0.75');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"url": "https://bf-ia-broker.{{domain}}"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Get the metadata of a single Landsat image, including the tideprediction results in the metadata.",
			"descriptionFormat": null,
			"folder": "15f9e775-9dcd-9b29-32e4-65f5117bbf44",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "cdc41497-4a21-36d1-2f42-2db0e1323f57",
			"method": "GET",
			"name": "Get Sentinel with tides",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "PL_API_KEY",
					"value": "{{PL API - NO COMMIT}}"
				},
				{
					"description": "",
					"enabled": true,
					"equals": true,
					"key": "tides",
					"value": "true"
				}
			],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"The same id should be returned\"] = postman.getEnvironmentVariable('sentinelId') == data.id;\n}\nif (testLevels(tests, data, 'properties.CurrentTide')) {\n    tests[\"CurrentTide is correct\"] = data.properties.CurrentTide <= 1.1*parseFloat(postman.getEnvironmentVariable('currentTide')) && data.properties.CurrentTide >= 0.9*parseFloat(postman.getEnvironmentVariable('currentTide'));\n}\nif (testLevels(tests, data, 'properties.MaximumTide24Hours')) {\n    tests[\"MaximumTide24Hours is correct\"] = data.properties.MaximumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours')) && data.properties.MaximumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('maximumTide24Hours'));\n}\nif (testLevels(tests, data, 'properties.MinimumTide24Hours')) {\n    tests[\"MinimumTide24Hours is correct\"] = data.properties.MinimumTide24Hours <= 1.1*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours')) && data.properties.MinimumTide24Hours >= 0.9*parseFloat(postman.getEnvironmentVariable('minimumTide24Hours'));\n}",
			"url": "https://bf-ia-broker.{{domain}}/planet/sentinel/{{sentinelId}}?PL_API_KEY={{PL API - NO COMMIT}}&tides=true",
			"isFromCollection": true,
			"collectionRequestId": "cdc41497-4a21-36d1-2f42-2db0e1323f57"
		},
		{
			"collectionId": "18c52758-31a5-4915-83e1-b79e242c4730",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Attempt to discover without supplying a PL key.",
			"descriptionFormat": null,
			"folder": "48786db7-1fee-2dd4-5775-c437d6d31f57",
			"headerData": [],
			"headers": "",
			"helperAttributes": "{}",
			"id": "cfd174bb-0611-c387-6761-84e4ba66dd0a",
			"method": "GET",
			"name": "Discover - No PL Key",
			"pathVariableData": [],
			"pathVariables": {},
			"preRequestScript": null,
			"queryParams": [],
			"rawModeData": null,
			"responses": [],
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem missing planet labs key\"] = responseBody.match(/planet/i) && responseBody.match(/key/i);",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye"
		}
	]
}