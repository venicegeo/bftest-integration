{
	"id": "e0f49d3f-1e5d-d723-3f2e-9a9436c39d1c",
	"name": "PZSVC-NDWI",
	"description": "",
	"order": [
		"d1ad1376-1f66-c00b-c692-06cce264c3b4",
		"19aac874-cd25-493b-ad64-dd0dc8b4102d",
		"a27f5ae0-e7f3-7e08-e2e9-49bdf901a5c0",
		"c5e19ee5-61f5-0f7f-da55-8af1ebcc0eb9",
		"1b5f46f8-9602-81c1-ed3d-b57bed46db90",
		"a5e42963-1454-e315-9c0a-3be122c5a85a"
	],
	"folders": [],
	"timestamp": 1496155424327,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"id": "19aac874-cd25-493b-ad64-dd0dc8b4102d",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/v2/key",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'uuid')) {\n    postman.setEnvironmentVariable('API Key', data.uuid);\n} else {\n    postman.setNextRequest('');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{cert}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1496172870883,
			"name": "Create Piazza Key",
			"description": "Create a new API key for testing",
			"collectionId": "e0f49d3f-1e5d-d723-3f2e-9a9436c39d1c",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "1b5f46f8-9602-81c1-ed3d-b57bed46db90",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/file/{{job_result}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1496170415403,
			"name": "Download Job Result",
			"description": "Download the result, which should be stored in Piazza",
			"collectionId": "e0f49d3f-1e5d-d723-3f2e-9a9436c39d1c",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		},
		{
			"id": "a27f5ae0-e7f3-7e08-e2e9-49bdf901a5c0",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/landsat?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{TwoDaysAgo}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar found_coastal = false;\nvar found_swir1 = false;\nvar found_both = false;\n\nif (testLevels(tests, data, 'features', 'array')) {\n    for (i = 0; i < data.features.length; i++) {\n        if (testLevels(tests, data.features[i], 'properties.bands.coastal', 'skip', 'features[].')) {\n            postman.setEnvironmentVariable('coastal_url', data.features[i].properties.bands.coastal);\n            found_coastal = true;\n        }\n        if (testLevels(tests, data.features[i], 'properties.bands.swir1', 'skip', 'features[].')) {\n            postman.setEnvironmentVariable('swir1_url', data.features[i].properties.bands.swir1);\n            found_swir1 = true;\n        }\n        if (found_coastal && found_swir1) {\n            found_both = true;\n            break;\n        } else { // must find both before moving on.\n            found_coastal = false;\n            found_swir1 = false;\n        }\n    }\n}\ntests[\"Both swir1 & coastal found\"] = found_both;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496170773775,
			"name": "Get Landsat Image",
			"description": "Query the catalog for a Landsat image",
			"collectionId": "e0f49d3f-1e5d-d723-3f2e-9a9436c39d1c",
			"responses": []
		},
		{
			"id": "a5e42963-1454-e315-9c0a-3be122c5a85a",
			"headers": "Content-Type: application/json\n",
			"url": "https://pzsvc-ndwi.{{domain}}/execute",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496172091640,
			"name": "Calculate Shoreline Error",
			"description": "Attempt to create a shoreline with bad input; the filenames in cmd do not match the filenames in \"inExtNames\".",
			"collectionId": "e0f49d3f-1e5d-d723-3f2e-9a9436c39d1c",
			"rawModeData": "{\n\t\"cmd\": \"-i xcoastal.TIF -i xswir1.TIF --bands 1 1 --basename shoreline --smooth 1.0\",\n\t\"userID\": \"QA:Autogenerated:01\",\n\t\"inExtFiles\": [\n\t\t\"{{coastal_url}}\",\n\t\t\"{{swir1_url}}\"\n\t],\n\t\"inExtNames\": [\n\t\t\"coastal.TIF\",\n\t\t\"swir1.TIF\"\n\t],\n\t\"outGeoJson\": [\n\t\t\"shoreline.geojson\"\n\t]\n}"
		},
		{
			"id": "c5e19ee5-61f5-0f7f-da55-8af1ebcc0eb9",
			"headers": "Content-Type: application/json\n",
			"url": "https://pzsvc-ndwi.{{domain}}/execute",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, ['OutFiles','shoreline.geojson'], 'string')) {\n    tests[\"GUID created for jobId\"] = data.OutFiles['shoreline.geojson'].match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"job_result\", data.OutFiles['shoreline.geojson']);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496172003097,
			"name": "Calculate Shoreline",
			"description": "Create a shoreline job, invoking pzsvc-ndwi directly.",
			"collectionId": "e0f49d3f-1e5d-d723-3f2e-9a9436c39d1c",
			"rawModeData": "{\n\t\"cmd\": \"-i coastal.TIF -i swir1.TIF --bands 1 1 --basename shoreline --smooth 1.0\",\n\t\"userID\": \"QA:Autogenerated:01\",\n\t\"inExtFiles\": [\n\t\t\"{{coastal_url}}\",\n\t\t\"{{swir1_url}}\"\n\t],\n\t\"inExtNames\": [\n\t\t\"coastal.TIF\",\n\t\t\"swir1.TIF\"\n\t],\n\t\"outGeoJson\": [\n\t\t\"shoreline.geojson\"\n\t]\n}"
		},
		{
			"id": "d1ad1376-1f66-c00b-c692-06cce264c3b4",
			"headers": "Content-Type: application/json\n",
			"url": "https://pzsvc-ndwi.{{domain}}/",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-15);\nd_string = d.toISOString();\npostman.setEnvironmentVariable('TwoDaysAgo', d.toISOString()); // Actually 60 days ago\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1496170937029,
			"name": "Health Check",
			"description": "Check that the app responds at all.",
			"collectionId": "e0f49d3f-1e5d-d723-3f2e-9a9436c39d1c",
			"rawModeData": ""
		}
	]
}