{
	"id": "ccd01c54-4f82-09ed-3787-8732855aac87",
	"name": "BF_API_no_key",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "473187bd-e30b-e79f-304f-1e3fdaba0e78",
			"name": "01_Startup",
			"description": "",
			"order": [
				"f08edbbf-8b05-2e12-2764-c2110ec65378",
				"bf288123-89d5-83ae-7b40-0d3ffef9f6d9",
				"0710f611-0785-4fa0-0305-040e675f5f64",
				"2e3c7a92-4de9-723c-6534-8ab7d57ce3fc",
				"a6c2a04c-92bc-0c49-d432-be3fd88a774b",
				"1aa3ef23-d0a7-b49b-0dbd-16212140e939"
			],
			"owner": "699425"
		},
		{
			"id": "c7a96460-d3de-cf85-653f-2669afd30898",
			"name": "02_High",
			"description": "",
			"order": [
				"d1a893de-8d55-d61e-c23b-5419e0207cfb",
				"78e89159-cf67-691b-ec38-e98d6f4f7b73"
			],
			"owner": "699425"
		},
		{
			"id": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"name": "03_Medium",
			"description": "",
			"order": [
				"e24ba0a9-a24e-5ae1-3c1d-a2368f5082d6",
				"251cd530-de84-c98c-7ab0-d1f2103d8465",
				"a30a5b36-87e5-7301-2e70-d6680359529e",
				"1ad1290a-501a-77d7-17b0-4a19508f0497",
				"63395e52-205a-e9df-585b-f2f50434d51e",
				"df6d4936-4ef8-0802-4821-2ba9ec98edc6",
				"74357109-94ee-e10e-8a85-8c9439d72eec",
				"8dec854d-76ca-e3c1-3026-d52c10a8c6a5",
				"0eb75fd2-2e28-c26a-03d7-3517da8f8c1f",
				"d7c15088-1fdb-83b1-8453-af64a5461440",
				"36346701-36dc-57fa-33c4-3f54c5f69adc"
			],
			"owner": "699425"
		},
		{
			"id": "1456056e-bc5a-37e3-6db0-73f4f8b6db86",
			"name": "04_Low",
			"description": "",
			"order": [
				"99d054f9-4cba-6c2f-bd37-cab9bcdb4417",
				"261a0848-d5d7-a8d8-e97e-c5c4b70deb6a",
				"46ef06e3-c006-9c2a-d1a2-2cd7560cbc83",
				"e4d5ec5b-9ac0-ce9b-0756-c07b539f905d",
				"0ac5a42e-9072-dce4-9d52-11dd5ce3fd57",
				"29cf0160-29c6-a9f1-7ad8-56658ee80393",
				"24595a0d-d6fd-5cf8-c9e2-b52110f69a27"
			],
			"owner": "699425"
		}
	],
	"timestamp": 1492613076318,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"collectionRequestId": "b4bfa388-3875-0151-0cc4-e9bf4eaf2811",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get the metadata of a specific algorithm.",
			"folder": "473187bd-e30b-e79f-304f-1e3fdaba0e78",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "0710f611-0785-4fa0-0305-040e675f5f64",
			"isFromCollection": true,
			"method": "GET",
			"name": "Get Algorithm",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntestLevels(tests, data, 'algorithm.description');\ntestLevels(tests, data, 'algorithm.interface');\ntestLevels(tests, data, 'algorithm.max_cloud_cover');\ntestLevels(tests, data, 'algorithm.name');\nif (testLevels(tests, data.algorithm, 'service_id')) {\n    tests[\"Correct service_id returned\"] = postman.getEnvironmentVariable('algServiceId') === data.algorithm.service_id;\n}\ntestLevels(tests, data, 'algorithm.version');",
			"time": 1486569670819,
			"url": "https://bf-api.{{domain}}/v0/algorithm/{{algServiceId}}",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without specifying a scene_id.",
			"folder": "1456056e-bc5a-37e3-6db0-73f4f8b6db86",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "0ac5a42e-9072-dce4-9d52-11dd5ce3fd57",
			"method": "POST",
			"name": "Create Job - Missing scene_id",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'scene_id' mentioned in message\"] = responseBody.match(/scene_id/);",
			"time": 1486570135632,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accept a CORS request from garbage.geointservices.io.",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Origin: https://garbage.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "0eb75fd2-2e28-c26a-03d7-3517da8f8c1f",
			"method": "GET",
			"name": "Invalid CORS - Garbage",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570153759,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"collectionRequestId": "ae5528f7-50a8-8867-9cae-e765d35c4dbe",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Validate that the url given for the WMS service is valid.",
			"folder": "473187bd-e30b-e79f-304f-1e3fdaba0e78",
			"headers": "",
			"helperAttributes": {},
			"id": "1aa3ef23-d0a7-b49b-0dbd-16212140e939",
			"isFromCollection": true,
			"method": "GET",
			"name": "Validate WMS URL",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570029778,
			"url": "{{wms_server_url}}"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/job endpoint.",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "1ad1290a-501a-77d7-17b0-4a19508f0497",
			"method": "POST",
			"name": "HTTP Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570147710,
			"url": "http://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without providing a Planet Labs Key.",
			"folder": "1456056e-bc5a-37e3-6db0-73f4f8b6db86",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "24595a0d-d6fd-5cf8-c9e2-b52110f69a27",
			"method": "POST",
			"name": "Create Job - missing planet_api_key",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'planet_api_key' mentioned in message\"] = responseBody.match(/planet_api_key/);",
			"time": 1486570137917,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\"\n}"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/algorithm endpoint.",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "251cd530-de84-c98c-7ab0-d1f2103d8465",
			"method": "GET",
			"name": "HTTP Algorithm",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570145790,
			"url": "http://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check for a 404 response when trying to get the status of a job that does not exist.",
			"folder": "1456056e-bc5a-37e3-6db0-73f4f8b6db86",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "261a0848-d5d7-a8d8-e97e-c5c4b70deb6a",
			"method": "GET",
			"name": "Check Fake Job Status",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"time": 1486570131518,
			"url": "https://bf-api.{{domain}}/v0/job/foo"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without specifying a name.",
			"folder": "1456056e-bc5a-37e3-6db0-73f4f8b6db86",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "29cf0160-29c6-a9f1-7ad8-56658ee80393",
			"method": "POST",
			"name": "Create Job - Missing name",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'name' mentioned in message\"] = responseBody.match(/name/);",
			"time": 1486570136574,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"{{scene_id}}\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"collectionRequestId": "e2685fc8-77e5-babe-ff1b-76289b7c6a1f",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Get a list of services in use by BF.",
			"folder": "473187bd-e30b-e79f-304f-1e3fdaba0e78",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "2e3c7a92-4de9-723c-6534-8ab7d57ce3fc",
			"isFromCollection": true,
			"method": "GET",
			"name": "Get Services",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'services.catalog')) {\n    postman.setEnvironmentVariable('catalog_url', data.services.catalog);\n}\nif (testLevels(tests, data, 'services.wms_server')) {\n    postman.setEnvironmentVariable('wms_server_url', data.services.wms_server.replace('https', 'http'));\n}\nif (testLevels(tests, data, 'profile.username')) {\n    tests[\"Correct username returned\"] = data.profile.username === postman.getEnvironmentVariable('bf_user_1');\n}",
			"time": 1486570023733,
			"url": "https://bf-api.{{domain}}/v0/user",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accepts a CORS request from http bf-swagger.",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Origin: http://bf-swagger.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "36346701-36dc-57fa-33c4-3f54c5f69adc",
			"method": "GET",
			"name": "Invalid CORS - HTTP BF-Swagger",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570155798,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "params",
			"description": "Check for a 404 response when trying to forget a job that does not exist.",
			"folder": "1456056e-bc5a-37e3-6db0-73f4f8b6db86",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "46ef06e3-c006-9c2a-d1a2-2cd7560cbc83",
			"method": "DELETE",
			"name": "Forget Fake Job",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"time": 1486570134038,
			"url": "https://bf-api.{{domain}}/v0/job/foo"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/productline endpoint.",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "63395e52-205a-e9df-585b-f2f50434d51e",
			"method": "POST",
			"name": "HTTP Product Line",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570148632,
			"url": "http://bf-api.{{domain}}/v0/productline",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"category\": \"test-category\",\n  \"max_cloud_cover\": 5,\n  \"min_x\": 79,\n  \"min_y\": 5,\n  \"max_x\": 82,\n  \"max_y\": 10,\n  \"name\": \"{{PL Name}}\",\n  \"spatial_filter_id\": null,\n  \"start_on\": \"2016-01-01T00:00:00Z\",\n  \"stop_on\": \"2017-01-01T00:00:00Z\"\n}"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api accepts a CORS request from bf-swagger.",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Origin: https://bf-swagger.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "74357109-94ee-e10e-8a85-8c9439d72eec",
			"method": "GET",
			"name": "Valid CORS - BF-Swagger",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570152046,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"id": "78e89159-cf67-691b-ec38-e98d6f4f7b73",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/rapideye:{{rapideyeId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1492613295395,
			"name": "List Jobs by Scene",
			"description": "List all jobs filtered by scene ID, making sure the just created job is present.",
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Referer: https://beachfront.stage.geointservices.io/v0/user\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "8dec854d-76ca-e3c1-3026-d52c10a8c6a5",
			"method": "GET",
			"name": "Invalid CORS - Just Referer",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570152928,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt to get the metadata of an algorithm that does not exist.",
			"folder": "1456056e-bc5a-37e3-6db0-73f4f8b6db86",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "99d054f9-4cba-6c2f-bd37-cab9bcdb4417",
			"method": "GET",
			"name": "Get Fake Algorithm",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Not found message.\"] = responseBody.match(/no.*found/i);",
			"time": 1486570031903,
			"url": "https://bf-api.{{domain}}/v0/algorithm/foo",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the /v0/user endpoint.",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "a30a5b36-87e5-7301-2e70-d6680359529e",
			"method": "GET",
			"name": "HTTP User",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570146725,
			"url": "http://bf-api.{{domain}}/v0/user",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"collectionRequestId": "71606d3e-2707-68fc-b845-08a18455f557",
			"currentHelper": "normal",
			"data": null,
			"dataMode": "params",
			"description": "Validate that the url given for the catalog service is valid",
			"folder": "473187bd-e30b-e79f-304f-1e3fdaba0e78",
			"headers": "",
			"helperAttributes": {},
			"id": "a6c2a04c-92bc-0c49-d432-be3fd88a774b",
			"isFromCollection": true,
			"method": "GET",
			"name": "Validate Catalog URL",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570027024,
			"url": "{{catalog_url}}"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"collectionRequestId": "ac5ad91e-2aa7-0329-354d-9d659379c540",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "List the algoithms in use by BF.",
			"folder": "473187bd-e30b-e79f-304f-1e3fdaba0e78",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "bf288123-89d5-83ae-7b40-0d3ffef9f6d9",
			"isFromCollection": true,
			"method": "GET",
			"name": "List Algorithms",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'algorithms', 'array')) {\n    for (i = 0; i < data.algorithms.length; i++) {\n        testLevels(tests, data.algorithms[i], 'description', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'interface', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'max_cloud_cover', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'name', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'service_id', 'skip', 'algorithms[].');\n        testLevels(tests, data.algorithms[i], 'version', 'skip', 'algorithms[].');\n    }\n    if (testLevels(tests, data.algorithms[0], 'service_id', 'skip', 'algorithms[].')) {\n        postman.setEnvironmentVariable('algServiceId', data.algorithms[0].service_id);\n    }\n}",
			"time": 1486569677587,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"id": "d1a893de-8d55-d61e-c23b-5419e0207cfb",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1492613255050,
			"name": "List Jobs",
			"description": "List all jobs the user can see, making sure the just created job is present.",
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api does not accepts a CORS request from https://bf-swagger.geointservices.io.garbage.io",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Origin: http://bf-swagger.{{domain}}.garbage.io\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "d7c15088-1fdb-83b1-8453-af64a5461440",
			"method": "GET",
			"name": "Invalid CORS - Phish",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;",
			"time": 1486570154845,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Check that bf-api accepts a CORS request from beachfront.",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Origin: https://beachfront.{{domain}}\n//Referer: garbage\nAccess-Control-Request-Headers: Content-Type,X-Requested-With\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "df6d4936-4ef8-0802-4821-2ba9ec98edc6",
			"method": "GET",
			"name": "Valid CORS - Beachfront",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"time": 1486570151182,
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Check that HTTPS is required at the base endpoint.",
			"folder": "517e5a36-7b8b-8cc2-3366-f5e06994aea3",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {},
			"id": "e24ba0a9-a24e-5ae1-3c1d-a2368f5082d6",
			"method": "GET",
			"name": "HTTP Base",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\ntests[\"HTTPS needed\"] = responseBody.match(/https/i);",
			"time": 1486570144790,
			"url": "http://bf-api.{{domain}}",
			"rawModeData": ""
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"currentHelper": "basicAuth",
			"data": [],
			"dataMode": "raw",
			"description": "Attempt a job without specifying an algorithm_id.",
			"folder": "1456056e-bc5a-37e3-6db0-73f4f8b6db86",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {
				"id": "basic",
				"password": "",
				"saveToRequest": true,
				"username": "{{bf_key_1}}"
			},
			"id": "e4d5ec5b-9ac0-ce9b-0756-c07b539f905d",
			"method": "POST",
			"name": "Create Job - Missing algorithm_id",
			"pathVariables": {},
			"preRequestScript": "",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Missing message\"] = responseBody.match(/miss/i);\ntests[\"'algorithm_id' mentioned in message\"] = responseBody.match(/algorithm_id/);",
			"time": 1486570134854,
			"url": "https://bf-api.{{domain}}/v0/job",
			"rawModeData": "{\n  \"scene_id\": \"{{scene_id}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"collectionId": "ccd01c54-4f82-09ed-3787-8732855aac87",
			"collectionRequestId": "62e5db49-d30d-322f-d522-a428f4502dc6",
			"currentHelper": "normal",
			"data": [],
			"dataMode": "raw",
			"description": "Check that the app responds at all.",
			"headers": "Content-Type: application/json\n",
			"helperAttributes": {},
			"id": "f08edbbf-8b05-2e12-2764-c2110ec65378",
			"isFromCollection": true,
			"method": "GET",
			"name": "Health Check",
			"pathVariables": {},
			"preRequestScript": null,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar d = new Date();\nd.setDate(d.getDate()-2);\nd_string = d.toISOString();\npostman.setEnvironmentVariable('TwoDaysAgo', d.toISOString());\n\npostman.setEnvironmentVariable('retry_loop', '0');\npostman.setEnvironmentVariable('max_retries', 20);\npostman.setEnvironmentVariable('PL Name', 'IntegrationTest_SriLanka');\n\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"time": 1487358929552,
			"url": "https://bf-api.{{domain}}",
			"folder": "473187bd-e30b-e79f-304f-1e3fdaba0e78",
			"rawModeData": ""
		}
	]
}