{
  "id": "fd317ed8-27ac-c316-1f43-bfbaaea69e01",
  "name": "int",
  "values": [
    {
      "key": "domain",
      "value": "int.geointservices.io",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "API Key",
      "value": "446d20bb-f887-406b-8604-9770e2825cf0",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "environment",
      "value": "int",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "Stage API Key",
      "value": "fce558e0-00d0-4c70-afe2-074b16b9ca0c",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "testLevels",
      "value": "(function(tests, inputObj, levels, typeCheck, testString) {   typeCheck = typeof typeCheck !== 'undefined' ? typeCheck : 'skip';   testString = typeof testString !== 'undefined' ? testString : '';    if (typeof levels === 'string') {     levels = levels.split('.');   }   if (inputObj !== null && inputObj.hasOwnProperty(levels[0])) {     var nextObj = inputObj[levels[0]];     if (levels.length === 1) {       testString += levels[0];       tests[testString + ' is present in output'] = true;       var check = false;       switch(typeCheck) {         case 'skip':           return true;         default:           tests[\"The type \" + typeCheck + \" is not supported\"] = false;           return false;         case 'string':           check = typeof nextObj === 'string';           break;         case 'array':           check = Array.isArray(nextObj) && nextObj.length > 0;           break;         case 'number':           check = !isNaN(parseFloat(nextObj)) && isFinite(nextObj);       }       tests[levels[0] + ' is ' + typeCheck] = check;       return check;     }     else {       testString += levels[0] + '.';       return testLevels(tests, nextObj, levels.slice(1), typeCheck, testString);     }   }   else {     if (testString === '') {       testString = levels[0];     }     else {       tests[testString.slice(0, -1) + ' is present in output'] = true;       testString += levels[0];     }     tests[testString + ' is present in output'] = false;     return false;   } })",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "testElements",
      "value": "(function (testLevels, tests, inputArray, levels, typeCheck) {   t = {};   m = true;   for (i = 0; i < inputArray.length; i++) {     m = m && testLevels(t, inputArray[i], levels, typeCheck);   }   tests[levels + \" present and valid in each array element.\"] = m;   return m; })",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "wait",
      "value": "(function(millis) {     var date = new Date();     var curDate = null;     do { curDate = new Date(); }     while(curDate-date < millis); })",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "parseJSON",
      "value": "(function (tests, jsonString){   try {     var o = JSON.parse(jsonString);     if (o && typeof o === \"object\") {       tests[\"Valid JSON returned\"] = true;       return o;     }   }   catch (e) { }   tests[\"Valid JSON returned\"] = false;   console.log(jsonString);   return {}; })",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "username",
      "value": "PiazzaAustere03@Piazza.geointservices.io",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "bf_user_1",
      "value": "QA:Autogenerated:01",
      "enabled": true,
      "type": "text"
    },
    {
      "key": "bf_user_2",
      "value": "QA:Autogenerated:02",
      "enabled": true,
      "type": "text"
    }
  ],
  "timestamp": 1485889019941,
  "_postman_variable_scope": "environment",
  "_postman_exported_at": "2017-01-31T18:57:02.549Z",
  "_postman_exported_using": "Postman/4.9.3"
}