node {
  // Run the Integration Tests on the Phase Two Environment
  def root = pwd()

  stage("Config") {
    // clone the configuration repository and copy the current configuration
    def configDir = "${root}/configuration"
    def configFile = "${root}/config.json"
    dir(configDir) {
      git url: "${env.CONFIGURATION_URL}", credentialsId: "${env.CONFIGURATION_CREDS}"
      sh "mv ${configDir}/${env.ENVIRONMENT}-config.json ${configFile}"
      deleteDir()
    }
    // read the current configuration
    def configJson = readJSON file: "${configFile}"
    for (param in configJson.credparams + configJson.jobparams) {
      env."${param.name}" = (param.type == "booleanParam") ? "${param.defaultvalue}".toBoolean() : "${param.defaultvalue}"
    }
  }
  
  def pcfSpace = "${env.SPACE}"
  def pcfDomain = "${env.DOMAIN}"
  
  stage("Setup") {
    deleteDir()
    if(env.USE_GIT_CREDS.toBoolean()) {
      git url: "${env.GIT_URL}", branch: "master", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "master"
    }
  }
  
  stage("Health Check Endpoints") {
    // Beachfront API
    sh "curl https://bf-api.${pcfDomain}"
    // Piazza
    sh "curl https://piazza.${pcfDomain}"
  }

  stage("Selenium Tests") {
    build job: "bftest-selenium", parameters: [
      [$class: 'StringParameterValue', name: "SPACE", value: "${pcfSpace}"],
      [$class: 'StringParameterValue', name: "DOMAIN", value: "${pcfDomain}"],
      [$class: 'StringParameterValue', name: "ENVIRONMENT", value: "${ENVIRONMENT}"]]
  }
  
}